/*******************************************************************************
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      https://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/
package net.adoptopenjdk.test.bigdecimal;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;

import org.junit.Assert;
import junit.framework.TestCase;
public class TestSuite001 extends TestCase
{
  MathContext rc_MathContext;
  int rc_int;
  boolean rc_boolean;
  long rc_long;
  BigDecimal rc_BigDecimal;
  float rc_float;
  byte rc_byte;
  short rc_short;
  double rc_double;
  BigDecimal[] rc_BigDecimal_array;
  String rc_String;
  BigInteger rc_BigInteger;
  
  public TestSuite001() {
  }
  public void testItem_0000()
  {
    rc_BigDecimal_array = (new BigDecimal("1")).divideAndRemainder(new BigDecimal("32"), new MathContext("precision=0 roundingMode=HALF_UP"));
  }
  public void testItem_0001()
  {
    rc_double = (new BigDecimal("899121.2")).doubleValue();
    Assert.assertEquals(899121.2, rc_double, 0);
  }
  public void testItem_0002()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("9AQRG>5?IQ6QDC9KVWVU:HC8Q<MUI1J1T:EVVM9;3KIN=8WGSEUKR9A;H?RE1P0EPEN1N>FYJ0Q89QUY>WD1CLIWRLMRXTE5O9=Y");
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("83.89261744966443%", true, caught);
  }
  public void testItem_0003()
  {
    rc_int = (new BigDecimal("899121.2")).signum();
    Assert.assertEquals(1, rc_int);
  }
  public void testItem_0004()
  {
    rc_BigDecimal = (new BigDecimal("32")).plus();
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0005()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("1")).pow(-2147483648, new MathContext("precision=1 roundingMode=FLOOR"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("83.89261744966443%", true, caught);
  }
  public void testItem_0006()
  {
    rc_short = (new BigDecimal("1")).shortValueExact();
    Assert.assertEquals(1, rc_short);
  }
  public void testItem_0007()
  {
    rc_int = (new BigDecimal("1")).precision();
    Assert.assertEquals(1, rc_int);
  }
  public void testItem_0008()
  {
    rc_int = (new BigDecimal("32")).intValueExact();
    Assert.assertEquals(32, rc_int);
  }
  public void testItem_0009()
  {
    rc_BigDecimal = (new BigDecimal("1")).pow(0, new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0010()
  {
    rc_BigDecimal = new BigDecimal(1.7976931348623157E308);
    Assert.assertEquals("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368", rc_BigDecimal.toString());
  }
  public void testItem_0011()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0012()
  {
    rc_BigDecimal = (new BigDecimal("32")).subtract(new BigDecimal("32"), new MathContext("precision=2147483647 roundingMode=CEILING"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0013()
  {
    rc_BigDecimal = (new BigDecimal("32")).subtract(new BigDecimal("1"), new MathContext("precision=0 roundingMode=UNNECESSARY"));
    Assert.assertEquals("31", rc_BigDecimal.toString());
  }
  public void testItem_0014()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("899121.2")).divide(new BigDecimal("1"), 0, -2147483648);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("84.22818791946308%", true, caught);
  }
  public void testItem_0015()
  {
    rc_String = (new BigDecimal("31")).toEngineeringString();
    Assert.assertEquals("31", rc_String);
  }
  public void testItem_0016()
  {
    rc_BigDecimal = (new BigDecimal("899121.2")).abs();
    Assert.assertEquals("899121.2", rc_BigDecimal.toString());
  }
  public void testItem_0017()
  {
    rc_BigDecimal = (new BigDecimal("32")).multiply(new BigDecimal("32"));
    Assert.assertEquals("1024", rc_BigDecimal.toString());
  }
  public void testItem_0018()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\uFFFF', '\234', '\1', '\uFFFF', '\uFFFF', '\1', '\0', '\uFFFF', '\234', '\234', '\234', '\uFFFF', '8', '\1', '\uFFFF', '\0', '8', '8', '\1', '8', '\0', '\0', '\0', '\uFFFF', '\0', '\uFFFF', '8', '\234', '\0', '\1', '\0', '8', '\1', '8', '\234', '\234', '\0', '8', '\1'}, -1, -2147483648, new MathContext("precision=0 roundingMode=HALF_UP"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.22818791946308%", true, caught);
  }
  public void testItem_0019()
  {
    boolean caught;
    caught = false;
    try {
      rc_long = (new BigDecimal("899121.2")).longValueExact();
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.22818791946308%", true, caught);
  }
  public void testItem_0020()
  {
    boolean caught;
    caught = false;
    try {
      rc_short = (new BigDecimal("899121.2")).shortValueExact();
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.22818791946308%", true, caught);
  }
//  public void testItem_0021()
//  {
//    boolean caught;
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("1024")).setScale(2147483647, java.math.RoundingMode.FLOOR);
//    }
//    catch (java.lang.NegativeArraySizeException e) {
//      caught = true;
//    }
//    Assert.assertEquals("84.22818791946308%", true, caught);
//  }
  public void testItem_0022()
  {
    rc_BigDecimal = (new BigDecimal("1024")).divideToIntegralValue(new BigDecimal("32"), new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0023()
  {
    rc_BigDecimal = (new BigDecimal("32")).movePointLeft(-1);
    Assert.assertEquals("320", rc_BigDecimal.toString());
  }
  public void testItem_0024()
  {
    rc_int = (new BigDecimal("31")).intValueExact();
    Assert.assertEquals(31, rc_int);
  }
  public void testItem_0025()
  {
    rc_BigDecimal = (new BigDecimal("31")).plus(new MathContext("precision=2147483647 roundingMode=CEILING"));
    Assert.assertEquals("31", rc_BigDecimal.toString());
  }
  public void testItem_0026()
  {
    rc_String = (new BigDecimal("899121.2")).toString();
    Assert.assertEquals("899121.2", rc_String);
  }
  public void testItem_0027()
  {
    rc_String = (new BigDecimal("899121.2")).toEngineeringString();
    Assert.assertEquals("899121.2", rc_String);
  }
  public void testItem_0028()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\1'});
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.22818791946308%", true, caught);
  }
  public void testItem_0029()
  {
    rc_float = (new BigDecimal("1024")).floatValue();
    Assert.assertEquals(1024.0F, rc_float, 0);
  }
  public void testItem_0030()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), new MathContext("precision=2147483647 roundingMode=CEILING"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0031()
  {
    rc_BigDecimal = (new BigDecimal("320")).remainder(new BigDecimal("32"), new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0032()
  {
    rc_BigDecimal = (new BigDecimal("320")).multiply(new BigDecimal("320"));
    Assert.assertEquals("102400", rc_BigDecimal.toString());
  }
  public void testItem_0033()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("X>4;WRNYVGMQ7CI=1114E@RDMIQ9SRH7AHEAVN?;HJ?;0HD;T7R1MMNSB4LQA8ACL3:@?SX>?4GV793>FSL15;<OMWGGJ66KD1B3", new MathContext("precision=2147483647 roundingMode=CEILING"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.22818791946308%", true, caught);
  }
  public void testItem_0034()
  {
    rc_String = (new BigDecimal("32")).toPlainString();
    Assert.assertEquals("32", rc_String);
  }
  public void testItem_0035()
  {
    rc_BigDecimal = (new BigDecimal("32")).multiply(new BigDecimal("32"), new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("1024", rc_BigDecimal.toString());
  }
  public void testItem_0036()
  {
    rc_BigDecimal = (new BigDecimal("1024")).setScale(0, 0);
    Assert.assertEquals("1024", rc_BigDecimal.toString());
  }
  public void testItem_0037()
  {
    rc_BigInteger = (new BigDecimal("32")).toBigInteger();
    Assert.assertEquals("32", rc_BigInteger.toString());
  }
  public void testItem_0038()
  {
    rc_BigDecimal = (new BigDecimal("0")).add(new BigDecimal("0"), new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0039()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\1', '\234', '\234', '\uFFFF', '\234', '\234', '\0', '8', '\uFFFF', '\uFFFF', '8', '\uFFFF', '\0', '\1', '\234', '\1', '\234', '\0', '\1', '8', '\0', '\1', '\234', '\uFFFF', '\1', '8', '\0'}, new MathContext("precision=0 roundingMode=HALF_UP"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.22818791946308%", true, caught);
  }
  public void testItem_0040()
  {
    rc_BigDecimal = (new BigDecimal("899121.2")).negate();
    Assert.assertEquals("-899121.2", rc_BigDecimal.toString());
  }
  public void testItem_0041()
  {
    rc_BigDecimal = new BigDecimal(1135879015891L, new MathContext("precision=0 roundingMode=UNNECESSARY"));
    Assert.assertEquals("1135879015891", rc_BigDecimal.toString());
  }
  public void testItem_0042()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), 1, new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("3.2", rc_BigDecimal.toString());
  }
  public void testItem_0043()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\uFFFF', '\234', '\uFFFF', '\uFFFF', '8', '\uFFFF', '8', '8', '\234', '\234', '\1', '\234', '\0', '\0', '\1', '\234', '\uFFFF', '\234', '\234', '\234', '\uFFFF', '\0', '\234', '\1', '\uFFFF', '\1', '8', '\0', '\0', '\0', '\uFFFF', '\234', '8', '\234', '\0', '\234', '\0', '\1', '\0', '8', '8', '8', '\1', '8', '\1', '\1', '\234', '\1', '8', '\uFFFF', '8', '8', '\234', '8', '\234', '\234', '\1', '\uFFFF', '\0', '\234', '\1', '\234', '\0', '8', '\uFFFF', '\0', '\1', '\234', '8', '\0', '\1', '\uFFFF', '\0', '\uFFFF', '\1', '8', '\uFFFF', '\uFFFF', '8', '8', '\0', '\uFFFF', '\0', '\0', '\234', '\1', '\234', '\1', '\1', '\uFFFF', '\1', '\234', '\1', '\0', '\1', '8', '\uFFFF', '\1', '\uFFFF', '8'}, new MathContext("precision=0 roundingMode=UNNECESSARY"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.22818791946308%", true, caught);
  }
  public void testItem_0044()
  {
    rc_int = (new BigDecimal("-899121.2")).precision();
    Assert.assertEquals(7, rc_int);
  }
//  public void testItem_0045()
//  {
//    boolean caught;
//    rc_int = (new BigDecimal("1135879015891")).hashCode();
//    Assert.assertEquals(2107853717, rc_int);
//  }
  public void testItem_0046()
  {
    rc_String = (new BigDecimal("3.2")).toPlainString();
    Assert.assertEquals("3.2", rc_String);
  }
//  public void testItem_0047()
//  {
//    boolean caught;
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("3.2")).divide(new BigDecimal("1024"), 2147483647, 1);
//    }
//    catch (java.lang.OutOfMemoryError e) {
//      caught = true;
//    }
//    Assert.assertEquals("84.22818791946308%", true, caught);
//  }
  public void testItem_0048()
  {
    rc_BigDecimal = (new BigDecimal("1135879015891")).add(new BigDecimal("0"), new MathContext("precision=0 roundingMode=UNNECESSARY"));
    Assert.assertEquals("1135879015891", rc_BigDecimal.toString());
  }
  public void testItem_0049()
  {
    rc_BigDecimal_array = (new BigDecimal("1135879015891")).divideAndRemainder(new BigDecimal("-899121.2"), new MathContext("precision=0 roundingMode=HALF_UP"));
  }
  public void testItem_0050()
  {
    rc_BigDecimal = (new BigDecimal("-899121.2")).add(new BigDecimal("1135879015891"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("1E+12", rc_BigDecimal.toString());
  }
  public void testItem_0051()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0052()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("@ABAVRWHWD1M;9T8ICYSV08T:;@CO>0WY4J4WJV90Q9>JLW", new MathContext("precision=0 roundingMode=HALF_UP"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.22818791946308%", true, caught);
  }
  public void testItem_0053()
  {
    rc_int = (new BigDecimal("1E+12")).compareTo(new BigDecimal("0"));
    Assert.assertEquals(1, rc_int);
  }
  public void testItem_0054()
  {
    rc_BigDecimal = new BigDecimal(1135879015891L);
    Assert.assertEquals("1135879015891", rc_BigDecimal.toString());
  }
  public void testItem_0055()
  {
    rc_BigDecimal = (new BigDecimal("1024")).subtract(new BigDecimal("1024"), new MathContext("precision=2147483647 roundingMode=CEILING"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0056()
  {
    rc_BigDecimal = (new BigDecimal("1E+12")).multiply(new BigDecimal("1135879015891"));
    Assert.assertEquals("1.135879015891E+24", rc_BigDecimal.toString());
  }
  public void testItem_0057()
  {
    rc_int = (new BigDecimal("1024")).scale();
    Assert.assertEquals(0, rc_int);
  }
  public void testItem_0058()
  {
    rc_BigDecimal = (new BigDecimal("0")).stripTrailingZeros();
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0059()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("1.135879015891E+24")).divideToIntegralValue(new BigDecimal("0"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.22818791946308%", true, caught);
  }
  public void testItem_0060()
  {
    rc_BigDecimal = new BigDecimal(1.7976931348623157E308);
    Assert.assertEquals("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368", rc_BigDecimal.toString());
  }
  public void testItem_0061()
  {
    rc_BigDecimal = (new BigDecimal("1135879015891")).max(new BigDecimal("0"));
    Assert.assertEquals("1135879015891", rc_BigDecimal.toString());
  }
  public void testItem_0062()
  {
    rc_BigDecimal = (new BigDecimal("1.135879015891E+24")).multiply(new BigDecimal("0"), new MathContext("precision=2147483647 roundingMode=CEILING"));
    Assert.assertEquals("0E+12", rc_BigDecimal.toString());
  }
  public void testItem_0063()
  {
    rc_BigDecimal = (new BigDecimal("1.135879015891E+24")).negate(new MathContext("precision=2147483647 roundingMode=CEILING"));
    Assert.assertEquals("-1.135879015891E+24", rc_BigDecimal.toString());
  }
  @SuppressWarnings("unlikely-arg-type")
  public void testItem_0064()
  {
    rc_boolean = (new BigDecimal("0")).equals("");
    Assert.assertEquals(false, rc_boolean);
  }
  public void testItem_0065()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal_array = (new BigDecimal("1.135879015891E+24")).divideAndRemainder(new BigDecimal("0"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.22818791946308%", true, caught);
  }
//  public void testItem_0066()
//  {
//    boolean caught;
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("-1.135879015891E+24")).setScale(-2147483648, java.math.RoundingMode.HALF_DOWN);
//    }
//    catch (java.lang.OutOfMemoryError e) {
//      caught = true;
//    }
//    Assert.assertEquals("84.22818791946308%", true, caught);
//  }
  public void testItem_0067()
  {
    rc_BigDecimal = (new BigDecimal("1.135879015891E+24")).movePointLeft(1);
    Assert.assertEquals("113587901589100000000000", rc_BigDecimal.toString());
  }
  public void testItem_0068()
  {
    rc_BigDecimal = (new BigDecimal("0")).negate();
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0069()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), new MathContext("precision=2147483647 roundingMode=CEILING"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0070()
  {
    rc_BigDecimal = new BigDecimal(4.9E-324);
    Assert.assertEquals("4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625E-324", rc_BigDecimal.toString());
  }
  public void testItem_0071()
  {
    rc_BigDecimal = (new BigDecimal("1135879015891")).multiply(new BigDecimal("4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625E-324"), new MathContext("precision=0 roundingMode=UNNECESSARY"));
    Assert.assertEquals("5.611987995837064614159856173842171116895575917869219224352046709401668751408119328908921887180984290111284970170453959858151403596578963242598832210908611923515591531029423611709235083107970145572440126453232155068367341481253115734445597601772718688037653853435824390304945682297985315851908003991934954406858357419863179899692039436151695274027603121908182280805716513109117689188380981852293974644143872244156268336515325911630523466380620413434079934546754301058534457153843991015218679894884855685082654213692083086761286177061321133786003636646633723666746839608633778476374897941122916143381037436416971955776696560326467390113749598169327929647609355620681403352422651581612259487151584346108289901997183200026901410406576786726873251609504222869873046875E-312", rc_BigDecimal.toString());
  }
  public void testItem_0072()
  {
    rc_BigDecimal = (new BigDecimal("-1.135879015891E+24")).movePointLeft(1);
    Assert.assertEquals("-113587901589100000000000", rc_BigDecimal.toString());
  }
  public void testItem_0073()
  {
    rc_BigDecimal = (new BigDecimal("1135879015891")).add(new BigDecimal("-1.135879015891E+24"), new MathContext("precision=2147483647 roundingMode=CEILING"));
    Assert.assertEquals("-1135879015889864120984109", rc_BigDecimal.toString());
  }
  public void testItem_0074()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal_array = (new BigDecimal("-1135879015889864120984109")).divideAndRemainder(new BigDecimal("0"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.22818791946308%", true, caught);
  }
  public void testItem_0075()
  {
    rc_String = (new BigDecimal("4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625E-324")).toPlainString();
    Assert.assertEqualsrc_String);
  }
  public void testItem_0076()
  {
    boolean caught;
    caught = false;
    try {
      rc_long = (new BigDecimal("4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625E-324")).longValueExact();
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.22818791946308%", true, caught);
  }
  public void testItem_0077()
  {
    rc_BigDecimal = (new BigDecimal("4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625E-324")).round(new MathContext("precision=0 roundingMode=UNNECESSARY"));
    Assert.assertEquals("4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625E-324", rc_BigDecimal.toString());
  }
  public void testItem_0078()
  {
    rc_float = (new BigDecimal("5.611987995837064614159856173842171116895575917869219224352046709401668751408119328908921887180984290111284970170453959858151403596578963242598832210908611923515591531029423611709235083107970145572440126453232155068367341481253115734445597601772718688037653853435824390304945682297985315851908003991934954406858357419863179899692039436151695274027603121908182280805716513109117689188380981852293974644143872244156268336515325911630523466380620413434079934546754301058534457153843991015218679894884855685082654213692083086761286177061321133786003636646633723666746839608633778476374897941122916143381037436416971955776696560326467390113749598169327929647609355620681403352422651581612259487151584346108289901997183200026901410406576786726873251609504222869873046875E-312")).floatValue();
    Assert.assertEquals(0.0F, rc_float, 0);
  }
  @SuppressWarnings("unlikely-arg-type")
  public void testItem_0079()
  {
    rc_boolean = (new BigDecimal("-1.135879015891E+24")).equals("BJPJMSRV61RBX3AO9W44IL@8WPUU?J8QMY==3K310>S7GYHK83MS?=>V>3JFLR8H?WU78>>:X2SG95LSA?2AP4HA<CO9367?V;2F");
    Assert.assertEquals(false, rc_boolean);
  }
  public void testItem_0080()
  {
    rc_String = (new BigDecimal("5.611987995837064614159856173842171116895575917869219224352046709401668751408119328908921887180984290111284970170453959858151403596578963242598832210908611923515591531029423611709235083107970145572440126453232155068367341481253115734445597601772718688037653853435824390304945682297985315851908003991934954406858357419863179899692039436151695274027603121908182280805716513109117689188380981852293974644143872244156268336515325911630523466380620413434079934546754301058534457153843991015218679894884855685082654213692083086761286177061321133786003636646633723666746839608633778476374897941122916143381037436416971955776696560326467390113749598169327929647609355620681403352422651581612259487151584346108289901997183200026901410406576786726873251609504222869873046875E-312")).toPlainString();
    Assert.assertEqualsrc_String);
  }
  public void testItem_0081()
  {
    rc_double = (new BigDecimal("4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625E-324")).doubleValue();
    Assert.assertEquals(4.9E-324, rc_double, 0);
  }
  public void testItem_0082()
  {
    rc_int = (new BigDecimal("4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625E-324")).signum();
    Assert.assertEquals(1, rc_int);
  }
  public void testItem_0083()
  {
    rc_BigDecimal = (new BigDecimal("0")).pow(0);
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0084()
  {
    rc_BigDecimal = new BigDecimal(new char[]{'8'});
    Assert.assertEquals("8", rc_BigDecimal.toString());
  }
  public void testItem_0085()
  {
    rc_BigDecimal = (new BigDecimal("8")).divideToIntegralValue(new BigDecimal("4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625E-324"));
    Assert.assertEquals("1619218026458484946819962773751338456396453198113136946855210864219442716543962775135683069611496995961496622914534495291118469899086347814936107199525908079372139394212530890915735261936745730729918141427781960548496059867397541588944826845193276450726480452098870156418667316921844020257490620069168050106461661928747958272", rc_BigDecimal.toString());
  }
  public void testItem_0086()
  {
    rc_BigDecimal = (new BigDecimal("4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625E-324")).divide(new BigDecimal("-1.135879015891E+24"), java.math.RoundingMode.HALF_DOWN);
    Assert.assertEquals("-4.349632653911598804499837858059960894795800826446458391426539734291779454564632505897567621549577771711269665774850066319673277891070562090667620210699085037265278083951353985070145671263228705692173043260988324325799700674623835914919165993159717870856508013282707326025464528696920033198037835927548283714375051478170039484709743259098920890969560635960332689706784986155039118692288113869606560267036225640050691972918629514104412905451821223615278743278740941826426864376402798110904037450922434309332212718527078320891581018568199879785668154997961819575998060572528142608534944313175672425371924744085788723374458949771649938667412573070885775746115025081301376437665297706772196075364307997133551073942105144311229180602E-348", rc_BigDecimal.toString());
  }
  public void testItem_0087()
  {
    rc_BigDecimal = (new BigDecimal("8")).negate();
    Assert.assertEquals("-8", rc_BigDecimal.toString());
  }
  public void testItem_0088()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), 2147483647, new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("3E-2147483646", rc_BigDecimal.toString());
  }
  public void testItem_0089()
  {
    rc_BigDecimal = (new BigDecimal("1619218026458484946819962773751338456396453198113136946855210864219442716543962775135683069611496995961496622914534495291118469899086347814936107199525908079372139394212530890915735261936745730729918141427781960548496059867397541588944826845193276450726480452098870156418667316921844020257490620069168050106461661928747958272")).plus(new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("1619218026458484946819962773751338456396453198113136946855210864219442716543962775135683069611496995961496622914534495291118469899086347814936107199525908079372139394212530890915735261936745730729918141427781960548496059867397541588944826845193276450726480452098870156418667316921844020257490620069168050106461661928747958272", rc_BigDecimal.toString());
  }
  public void testItem_0090()
  {
    boolean caught;
    caught = false;
    try {
      rc_int = (new BigDecimal("4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625E-324")).intValueExact();
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.56375838926175%", true, caught);
  }
  public void testItem_0091()
  {
    rc_BigDecimal = (new BigDecimal("3E-2147483646")).min(new BigDecimal("-1.135879015891E+24"));
    Assert.assertEquals("-1.135879015891E+24", rc_BigDecimal.toString());
  }
  public void testItem_0092()
  {
    rc_float = (new BigDecimal("-8")).floatValue();
    Assert.assertEquals(-8.0F, rc_float, 0);
  }
  public void testItem_0093()
  {
    rc_short = (new BigDecimal("-8")).shortValueExact();
    Assert.assertEquals(-8, rc_short);
  }
  public void testItem_0094()
  {
    rc_BigDecimal = (new BigDecimal("3E-2147483646")).plus();
    Assert.assertEquals("3E-2147483646", rc_BigDecimal.toString());
  }
  public void testItem_0095()
  {
    rc_int = (new BigDecimal("1619218026458484946819962773751338456396453198113136946855210864219442716543962775135683069611496995961496622914534495291118469899086347814936107199525908079372139394212530890915735261936745730729918141427781960548496059867397541588944826845193276450726480452098870156418667316921844020257490620069168050106461661928747958272")).compareTo(new BigDecimal("1619218026458484946819962773751338456396453198113136946855210864219442716543962775135683069611496995961496622914534495291118469899086347814936107199525908079372139394212530890915735261936745730729918141427781960548496059867397541588944826845193276450726480452098870156418667316921844020257490620069168050106461661928747958272"));
    Assert.assertEquals(0, rc_int);
  }
  public void testItem_0096()
  {
    rc_BigDecimal = (new BigDecimal("4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625E-324")).abs(new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625E-324", rc_BigDecimal.toString());
  }
  public void testItem_0097()
  {
    boolean caught;
    caught = false;
    try {
      rc_long = (new BigDecimal("1619218026458484946819962773751338456396453198113136946855210864219442716543962775135683069611496995961496622914534495291118469899086347814936107199525908079372139394212530890915735261936745730729918141427781960548496059867397541588944826845193276450726480452098870156418667316921844020257490620069168050106461661928747958272")).longValueExact();
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.56375838926175%", true, caught);
  }
  public void testItem_0098()
  {
    rc_float = (new BigDecimal("3E-2147483646")).floatValue();
    Assert.assertEquals(0.0F, rc_float, 0);
  }
  public void testItem_0099()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext(-1, java.math.RoundingMode.HALF_DOWN);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0100()
  {
    rc_BigDecimal = (new BigDecimal("-8")).ulp();
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0101()
  {
    rc_int = (new BigDecimal("-1.135879015891E+24")).precision();
    Assert.assertEquals(13, rc_int);
  }
  public void testItem_0102()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\234', '\1', '\uFFFF', '\234', '\1', '\234', '\234', '\1', '\0', '\0', '\uFFFF', '\234', '\234', '8', '\1', '\1', '\1', '\1', '\234', '\uFFFF', '\234', '\234', '\0', '\1', '8', '\234', '\1', '8', '\0', '\0', '\1', '\1', '\1', '\1', '\0', '\uFFFF', '8', '8', '\uFFFF', '\uFFFF', '\0', '8', '\0', '\234', '\1', '8', '\1', '\0', '\0', '\1', '8', '\1', '\234', '\0', '\1', '\1', '\uFFFF', '8', '\uFFFF', '8', '\234', '\0', '8', '\uFFFF', '\uFFFF', '\234', '\uFFFF', '8', '\234', '\234', '8', '\1', '\1', '\234', '\0', '\1', '\uFFFF', '\1', '\0', '\1', '\0', '\234', '8', '\1', '\uFFFF', '\1', '8', '\0', '\1', '\0', '8', '\1', '\uFFFF', '\0', '\1', '\uFFFF', '8', '8', '8', '\0'}, 2147483647, -1);
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0103()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("3E+1", rc_BigDecimal.toString());
  }
  public void testItem_0104()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("I55MFS90A:NCMKKXCUX1IOXTMJQ9=OB=33FT;C@GD707<B6A2FA:EIXAUO@?B?NAM>9>88OUONE8>BWBOHEL@@9W:1SV:5F2N4NI", new MathContext("precision=1 roundingMode=HALF_UP"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0105()
  {
    rc_BigDecimal = (new BigDecimal("-8")).abs(new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("8", rc_BigDecimal.toString());
  }
  public void testItem_0106()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("3E-2147483646")).add(new BigDecimal("-1.135879015891E+24"), new MathContext("precision=0 roundingMode=HALF_UP"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0107()
  {
    rc_BigDecimal = (new BigDecimal("1619218026458484946819962773751338456396453198113136946855210864219442716543962775135683069611496995961496622914534495291118469899086347814936107199525908079372139394212530890915735261936745730729918141427781960548496059867397541588944826845193276450726480452098870156418667316921844020257490620069168050106461661928747958272")).divide(new BigDecimal("8"), 1, java.math.RoundingMode.FLOOR);
    Assert.assertEquals("202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784.0", rc_BigDecimal.toString());
  }
  public void testItem_0108()
  {
    rc_BigInteger = (new BigDecimal("-8")).unscaledValue();
    Assert.assertEquals("-8", rc_BigInteger.toString());
  }
  public void testItem_0109()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'8'}, 1, -1);
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0110()
  {
    rc_BigDecimal = (new BigDecimal("-8")).divide(new BigDecimal("-1.135879015891E+24"), 0, java.math.RoundingMode.HALF_EVEN);
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0111()
  {
    rc_int = (new BigDecimal("202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784.0")).signum();
    Assert.assertEquals(1, rc_int);
  }
  public void testItem_0112()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("F?@:72NB7O3K;U>XCDDY2YTFE;4QDE8ADH=QG9JJ:NCWF0V:>F>@4P<?P1KHVX0K:>HD@6WQM0GJ;RDVEK;AI=V;KA8>XCGWA>3X", new MathContext("precision=2147483647 roundingMode=CEILING"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0113()
  {
    rc_BigDecimal = (new BigDecimal("-1.135879015891E+24")).divideToIntegralValue(new BigDecimal("-8"));
    Assert.assertEquals("1.41984876986375E+23", rc_BigDecimal.toString());
  }
  public void testItem_0114()
  {
    rc_BigDecimal = (new BigDecimal("0")).subtract(new BigDecimal("0"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0115()
  {
    rc_BigDecimal = (new BigDecimal("0")).plus(new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0116()
  {
    rc_BigDecimal = (new BigDecimal("1.41984876986375E+23")).plus();
    Assert.assertEquals("1.41984876986375E+23", rc_BigDecimal.toString());
  }
  public void testItem_0117()
  {
    rc_BigDecimal = (new BigDecimal("0")).plus();
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0118()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("1.41984876986375E+23")).setScale(2147483647, java.math.RoundingMode.DOWN);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0119()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\234', '8', '\uFFFF', '\uFFFF', '8', '\uFFFF', '\0', '\234', '\uFFFF', '\0', '\uFFFF', '\uFFFF', '\0', '\0', '\uFFFF', '\0', '8', '8', '\uFFFF', '\uFFFF', '\1', '\uFFFF', '\0', '\0', '\1', '\1', '\234', '\1', '\234', '\1', '\uFFFF', '\0', '\1', '8', '\0', '\0', '\234', '\0', '\1', '\234', '\1', '\1', '\1', '\0', '\uFFFF', '\1', '\0', '\234', '\1', '\0', '\1', '\1', '\uFFFF', '8', '\234', '\234', '\1', '\uFFFF', '\0', '8', '\0', '\1', '\0', '\uFFFF', '\uFFFF', '\1', '8', '\0', '\1', '\1', '\0', '\1', '\0', '\uFFFF', '\uFFFF', '\uFFFF', '\uFFFF', '8', '\uFFFF', '\0', '\1', '\0', '\0', '\0', '\0', '\234', '\0', '\234', '\0', '\1', '\1', '\uFFFF', '8', '\uFFFF', '\234', '\0', '\1', '\1', '\uFFFF', '8'}, -1, -2147483648, new MathContext("precision=0 roundingMode=UNNECESSARY"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0120()
  {
    rc_float = (new BigDecimal("-8")).floatValue();
    Assert.assertEquals(-8.0F, rc_float, 0);
  }
  public void testItem_0121()
  {
    rc_BigDecimal = (new BigDecimal("0")).divide(new BigDecimal("1.41984876986375E+23"), 1);
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0122()
  {
    boolean caught;
    caught = false;
    try {
      rc_long = (new BigDecimal("-1.135879015891E+24")).longValueExact();
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0123()
  {
    rc_BigInteger = (new BigDecimal("0")).unscaledValue();
    Assert.assertEquals("0", rc_BigInteger.toString());
  }
  public void testItem_0124()
  {
    rc_BigDecimal = (new BigDecimal("0")).divide(new BigDecimal("1.41984876986375E+23"));
    Assert.assertEquals("0E-9", rc_BigDecimal.toString());
  }
  public void testItem_0125()
  {
    rc_BigDecimal = new BigDecimal(1, new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0126()
  {
    rc_BigDecimal = new BigDecimal(1.0);
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0127()
  {
    rc_int = (new BigDecimal("0E-9")).intValueExact();
    Assert.assertEquals(0, rc_int);
  }
  public void testItem_0128()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\1', '\234', '\1', '\uFFFF', '\1', '8', '\0', '\uFFFF', '\234', '\1', '\234', '\0', '\uFFFF', '8', '8', '\1', '\1', '\0', '\234', '\uFFFF', '\uFFFF', '\0', '\1', '\uFFFF', '\uFFFF', '\0', '\uFFFF', '\uFFFF', '\uFFFF', '8', '\234', '\1', '\0', '\1', '8', '\0', '\1', '\1', '8', '\234', '8', '\uFFFF', '\0', '\0', '8'}, 1, -2147483648);
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0129()
  {
    rc_BigDecimal = (new BigDecimal("1.41984876986375E+23")).abs(new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("1E+23", rc_BigDecimal.toString());
  }
  public void testItem_0130()
  {
    rc_BigDecimal = (new BigDecimal("1E+23")).movePointLeft(2147483647);
    Assert.assertEquals("1E-2147483624", rc_BigDecimal.toString());
  }
//  public void testItem_0131()
//  {
//    boolean caught;
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("1E-2147483624")).divide(new BigDecimal("1.41984876986375E+23"), -1, 1);
//    }
//    catch (java.lang.OutOfMemoryError e) {
//      caught = true;
//    }
//    Assert.assertEquals("84.8993288590604%", true, caught);
//  }
  public void testItem_0132()
  {
    rc_BigDecimal = (new BigDecimal("-8")).min(new BigDecimal("-8"));
    Assert.assertEquals("-8", rc_BigDecimal.toString());
  }
  public void testItem_0133()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("1.41984876986375E+23")).setScale(2147483647, -2147483648);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0134()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("1")).setScale(-1, 2147483647);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0135()
  {
    rc_BigDecimal = (new BigDecimal("1E+23")).setScale(-1, 0);
    Assert.assertEquals("1.0000000000000000000000E+23", rc_BigDecimal.toString());
  }
//  public void testItem_0136()
//  {
//    boolean caught;
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("1.41984876986375E+23")).setScale(-2147483648);
//    }
//    catch (java.lang.OutOfMemoryError e) {
//      caught = true;
//    }
//    Assert.assertEquals("84.8993288590604%", true, caught);
//  }
  public void testItem_0137()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("6;TQM:1:=WSB:9<0TNP38A18:M9<0KKKXR8V?@2::RFUH:SY80AM3W1CPX8D08D?BS>1S19:HNPMIXKETYXYWBG8UF;2AU0DOS=2", new MathContext("precision=1 roundingMode=HALF_UP"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0138()
  {
    rc_BigDecimal = (new BigDecimal("1E-2147483624")).min(new BigDecimal("1E+23"));
    Assert.assertEquals("1E-2147483624", rc_BigDecimal.toString());
  }
  public void testItem_0139()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("EY4Q;O?NME6VVGC=T>CQ=JOKVIQ0T6F1NC2?<5C01:G@LGF1:A9Q8OGJMXJIG688J2BH>DW9KPD9;;BKRLG?:@94VCL42NJ9MH8J", new MathContext("precision=1 roundingMode=HALF_UP"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0140()
  {
    rc_BigInteger = (new BigDecimal("1E+23")).unscaledValue();
    Assert.assertEquals("1", rc_BigInteger.toString());
  }
  public void testItem_0141()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("1.41984876986375E+23")).remainder(new BigDecimal("1E-2147483624"), new MathContext("precision=1 roundingMode=HALF_UP"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0142()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("1.41984876986375E+23")).setScale(-2147483648, 2147483647);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0143()
  {
    rc_BigDecimal = (new BigDecimal("1E-2147483624")).max(new BigDecimal("1"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0144()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), 2147483647);
    Assert.assertEquals("3.2E-2147483646", rc_BigDecimal.toString());
  }
  public void testItem_0145()
  {
    rc_BigDecimal = new BigDecimal(1.0);
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0146()
  {
    rc_int = (new BigDecimal("1E+23")).precision();
    Assert.assertEquals(1, rc_int);
  }
  public void testItem_0147()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext("SAL65;H92M7QW@FMBBKM6DU>J>X3YU6LU<=PPER;7>IWYPAQV7P9;SM:BVU4DW6Q=82HIM6I@O4KNF3LK6TY=72@=B;W>OW=30=I");
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0148()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("1")).scaleByPowerOfTen(-2147483648);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
//  public void testItem_0149()
//  {
//    boolean caught;
//    if (!Boolean.getBoolean("notanerror"))
//    {
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("3.2E-2147483646")).divide(new BigDecimal("1"));
//    }
//    catch (java.lang.ArithmeticException e) {
//      caught = true;
//    }
//    Assert.assertEquals("84.8993288590604%", true, caught);
//    }
//  }
  public void testItem_0150()
  {
    rc_BigDecimal = (new BigDecimal("1E+23")).add(new BigDecimal("1E+23"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("2E+23", rc_BigDecimal.toString());
  }
  public void testItem_0151()
  {
    boolean caught;
    caught = false;
    try {
      rc_int = (new BigDecimal("1.41984876986375E+23")).intValueExact();
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0152()
  {
    rc_BigDecimal = (new BigDecimal("1E+23")).plus();
    Assert.assertEquals("1E+23", rc_BigDecimal.toString());
  }
  public void testItem_0153()
  {
    boolean caught;
    caught = false;
    try {
      rc_long = (new BigDecimal("2E+23")).longValueExact();
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0154()
  {
    rc_BigDecimal = (new BigDecimal("1.41984876986375E+23")).pow(1, new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("1E+23", rc_BigDecimal.toString());
  }
  public void testItem_0155()
  {
    rc_String = (new BigDecimal("1E+23")).toString();
    Assert.assertEquals("1E+23", rc_String);
  }
  public void testItem_0156()
  {
    rc_BigDecimal = (new BigDecimal("1")).divideToIntegralValue(new BigDecimal("1.41984876986375E+23"));
    Assert.assertEquals("0E-9", rc_BigDecimal.toString());
  }
  public void testItem_0157()
  {
    rc_BigDecimal = (new BigDecimal("1")).subtract(new BigDecimal("1"), new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0158()
  {
    rc_BigDecimal = new BigDecimal(new char[]{'8'});
    Assert.assertEquals("8", rc_BigDecimal.toString());
  }
  public void testItem_0159()
  {
    rc_BigDecimal_array = (new BigDecimal("0")).divideAndRemainder(new BigDecimal("1E+23"), new MathContext("precision=2147483647 roundingMode=CEILING"));
  }
  public void testItem_0160()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), 1);
    Assert.assertEquals("3.2", rc_BigDecimal.toString());
  }
  public void testItem_0161()
  {
    rc_String = (new BigDecimal("1")).toString();
    Assert.assertEquals("1", rc_String);
  }
  public void testItem_0162()
  {
    boolean caught;
    caught = false;
    try {
      rc_byte = (new BigDecimal("1E+23")).byteValueExact();
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0163()
  {
    rc_BigDecimal = (new BigDecimal("0")).scaleByPowerOfTen(-2147483648);
    Assert.assertEquals("0E-2147483647", rc_BigDecimal.toString());
  }
  public void testItem_0164()
  {
    rc_BigDecimal = new BigDecimal(0, new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0165()
  {
    rc_float = (new BigDecimal("0E-2147483647")).floatValue();
    Assert.assertEquals(0.0F, rc_float, 0);
  }
  @SuppressWarnings("unlikely-arg-type")
  public void testItem_0166()
  {
    rc_boolean = (new BigDecimal("0E-2147483647")).equals("7=YG5QP2VX@38PTFR=7<QANNGSHXH?@O1=R3YMN4AV70RCE@XGP65AQULO>5MRI<B?=30E1S2X;:X;WRB0:TS21U637P82CC?R8Q");
    Assert.assertEquals(false, rc_boolean);
  }
//  public void testItem_0167()
//  {
//    boolean caught;
//    if (!Boolean.getBoolean("notanerror"))
//    {
//    rc_BigDecimal = (new BigDecimal("0E-2147483647")).multiply(new BigDecimal("0E-2147483647"), new MathContext("precision=0 roundingMode=HALF_UP"));
//    Assert.assertEquals("0E-2147483647", rc_BigDecimal.toString());
//    }
//  }
  public void testItem_0168()
  {
    rc_double = (new BigDecimal("0E-9")).doubleValue();
    Assert.assertEquals(0.0, rc_double, 0);
  }
  public void testItem_0169()
  {
    rc_BigDecimal = (new BigDecimal("0E-2147483647")).min(new BigDecimal("0"));
    Assert.assertEquals("0E-2147483647", rc_BigDecimal.toString());
  }
  public void testItem_0170()
  {
    rc_BigInteger = (new BigDecimal("0")).unscaledValue();
    Assert.assertEquals("0", rc_BigInteger.toString());
  }
  public void testItem_0171()
  {
    rc_BigDecimal = (new BigDecimal("0E-2147483647")).plus();
    Assert.assertEquals("0E-2147483647", rc_BigDecimal.toString());
  }
  public void testItem_0172()
  {
    rc_BigDecimal = (new BigDecimal("0E-9")).plus();
    Assert.assertEquals("0E-9", rc_BigDecimal.toString());
  }
  public void testItem_0173()
  {
    rc_int = (new BigDecimal("0E-2147483647")).compareTo(new BigDecimal("0E-2147483647"));
    Assert.assertEquals(0, rc_int);
  }
  public void testItem_0174()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("0E-2147483647")).divideToIntegralValue(new BigDecimal("0"), new MathContext("precision=1 roundingMode=FLOOR"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0175()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("3E+1", rc_BigDecimal.toString());
  }
  public void testItem_0176()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("0E-2147483647")).divide(new BigDecimal("0"), java.math.RoundingMode.HALF_UP);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0177()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\0'});
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0178()
  {
    rc_BigDecimal = new BigDecimal(1L);
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0179()
  {
    rc_BigDecimal = (new BigDecimal("0")).setScale(1);
    Assert.assertEquals("0.0", rc_BigDecimal.toString());
  }
  public void testItem_0180()
  {
    rc_String = (new BigDecimal("0E-9")).toString();
    Assert.assertEquals("0E-9", rc_String);
  }
  public void testItem_0181()
  {
    rc_BigInteger = (new BigDecimal("1")).unscaledValue();
    Assert.assertEquals("1", rc_BigInteger.toString());
  }
  public void testItem_0182()
  {
    rc_BigDecimal = (new BigDecimal("0E-2147483647")).setScale(1);
    Assert.assertEquals("0.0", rc_BigDecimal.toString());
  }
  @SuppressWarnings("unlikely-arg-type")
  public void testItem_0183()
  {
    rc_boolean = (new BigDecimal("0E-2147483647")).equals("");
    Assert.assertEquals(false, rc_boolean);
  }
  public void testItem_0184()
  {
    rc_BigDecimal = new BigDecimal(-1.0);
    Assert.assertEquals("-1", rc_BigDecimal.toString());
  }
  public void testItem_0185()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("0E-2147483647")).divideToIntegralValue(new BigDecimal("0.0"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0186()
  {
    rc_BigDecimal = (new BigDecimal("0E-2147483647")).divide(new BigDecimal("1"));
    Assert.assertEquals("0E-2147483647", rc_BigDecimal.toString());
  }
  public void testItem_0187()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\1', '\234', '\0', '\1', '\234', '\0', '\uFFFF', '\0', '\1', '\uFFFF', '8', '\1', '\234', '\uFFFF', '\uFFFF', '\0', '\uFFFF', '\1', '8', '\uFFFF', '\234', '\1', '\uFFFF', '\1', '\234', '\1', '\1', '\0', '\0', '\1', '\1', '8', '\234', '\234', '\uFFFF', '\0', '\0', '\uFFFF', '\0', '\234', '\0', '\234', '\uFFFF', '8', '\1', '\234', '8', '\1', '8', '\1', '\234', '\uFFFF', '\234', '\1', '\uFFFF', '8', '\uFFFF', '\1', '\234', '8', '\uFFFF', '\234', '8', '\uFFFF', '\uFFFF', '\234', '\1', '\0', '\0', '\0', '\uFFFF', '\uFFFF', '\234', '\234', '8', '8', '\0', '\1', '8', '\234', '\0', '8', '\uFFFF', '8', '\1', '8', '\1', '\uFFFF', '\1', '8', '\1', '\0', '\uFFFF', '\uFFFF', '8', '\0', '\234', '\0', '\uFFFF', '\0'});
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0188()
  {
    rc_BigDecimal = (new BigDecimal("0E-2147483647")).divide(new BigDecimal("-1"));
    Assert.assertEquals("0E-2147483647", rc_BigDecimal.toString());
  }
  public void testItem_0189()
  {
    rc_BigDecimal = (new BigDecimal("0E-2147483647")).add(new BigDecimal("0E-2147483647"), new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("0E-2147483647", rc_BigDecimal.toString());
  }
  public void testItem_0190()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("0E-2147483647")).remainder(new BigDecimal("0E-2147483647"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0191()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("0E-2147483647")).divide(new BigDecimal("0E-2147483647"), java.math.RoundingMode.HALF_DOWN);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0192()
  {
    rc_BigDecimal = new BigDecimal(0.0, new MathContext("precision=2147483647 roundingMode=CEILING"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0193()
  {
    rc_BigDecimal = (new BigDecimal("0E-2147483647")).scaleByPowerOfTen(2147483647);
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0194()
  {
    rc_short = (new BigDecimal("0")).shortValueExact();
    Assert.assertEquals(0, rc_short);
  }
  public void testItem_0195()
  {
    rc_int = (new BigDecimal("0.0")).intValue();
    Assert.assertEquals(0, rc_int);
  }
  public void testItem_0196()
  {
    rc_BigDecimal = new BigDecimal(1.7976931348623157E308, new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("1E+308", rc_BigDecimal.toString());
  }
  public void testItem_0197()
  {
    rc_BigDecimal = (new BigDecimal("1E+308")).abs(new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("1E+308", rc_BigDecimal.toString());
  }
  public void testItem_0198()
  {
    rc_int = (new BigDecimal("0E-2147483647")).scale();
    Assert.assertEquals(2147483647, rc_int);
  }
  public void testItem_0199()
  {
    rc_BigDecimal = (new BigDecimal("0")).divide(new BigDecimal("-1"), java.math.RoundingMode.FLOOR);
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0200()
  {
    rc_BigDecimal = (new BigDecimal("0")).abs(new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0201()
  {
    rc_BigDecimal = (new BigDecimal("0")).abs();
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0202()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("3E+1", rc_BigDecimal.toString());
  }
  public void testItem_0203()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("3E+1", rc_BigDecimal.toString());
  }
  public void testItem_0204()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("XQUR;LSIXAQ;9NAAT19EHE69UH:BV;71I3PPFWM4RFO>?FY;D2SY8@NAKA:TDR;22ET=MLHA3O>2V>>F;RA;9MVKWV1;M6T?I<IP", new MathContext("precision=0 roundingMode=UNNECESSARY"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0205()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("");
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0206()
  {
    rc_BigDecimal = (new BigDecimal("0")).plus();
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0207()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), -1);
    Assert.assertEquals("3.2E+2", rc_BigDecimal.toString());
  }
//  public void testItem_0208()
//  {
//    boolean caught;
//    if (!Boolean.getBoolean("notanerror"))
//    {
//    rc_BigDecimal = (new BigDecimal("0E-2147483647")).multiply(new BigDecimal("0.0"), new MathContext("precision=1 roundingMode=HALF_UP"));
//    Assert.assertEquals("0E-2147483647", rc_BigDecimal.toString());
//    }
//  }
  public void testItem_0209()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("0E-2147483647")).setScale(1, 2147483647);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0210()
  {
    rc_BigDecimal = (new BigDecimal("0E-2147483647")).ulp();
    Assert.assertEquals("1E-2147483647", rc_BigDecimal.toString());
  }
  public void testItem_0211()
  {
    rc_BigDecimal = (new BigDecimal("0")).divide(new BigDecimal("3.2E+2"), new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("0.0", rc_BigDecimal.toString());
  }
  public void testItem_0212()
  {
    rc_BigDecimal = (new BigDecimal("0.0")).setScale(2147483647, java.math.RoundingMode.HALF_UP);
    Assert.assertEquals("0E-2147483647", rc_BigDecimal.toString());
  }
  public void testItem_0213()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\1', '8', '8', '\0', '\0', '\234', '\0', '\1', '\234', '\uFFFF', '8', '\0', '\0', '\234', '\1', '\234', '8', '\uFFFF', '\1', '\0', '8', '\0', '\0', '\234', '\1', '\234', '\1', '8', '\1', '\234', '\234', '\uFFFF', '\234', '8', '8', '8', '\1', '\uFFFF', '\234', '\uFFFF', '8', '\uFFFF', '8', '\uFFFF', '8', '\0', '\1', '\234', '8', '8', '\1', '\234', '\0', '\1', '\uFFFF', '\uFFFF', '\0', '\1', '8', '\1', '\1', '\0', '\0', '\uFFFF', '\1', '8', '8', '\uFFFF', '\1', '8', '\uFFFF', '\0', '\234', '8', '8', '8', '\234', '8', '\0', '\234', '\uFFFF', '\1', '\uFFFF', '\234', '\234', '\uFFFF', '\0', '\234', '\0', '\234', '\0', '\234', '8', '\0', '\1', '8', '8', '\234', '8', '\1'}, -2147483648, -1);
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0214()
  {
    rc_BigDecimal = (new BigDecimal("0")).abs(new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  @SuppressWarnings("unlikely-arg-type")
  public void testItem_0215()
  {
    rc_boolean = (new BigDecimal("3.2E+2")).equals("");
    Assert.assertEquals(false, rc_boolean);
  }
  public void testItem_0216()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0217()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("32")).remainder(new BigDecimal("0"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  @SuppressWarnings("unlikely-arg-type")
  public void testItem_0218()
  {
    rc_boolean = (new BigDecimal("32")).equals("@58IFP@CSUO=8I<I?A>BF<><6@OR@9Q167RP>2THF=U8SPKUMYX83=6RMM>JW8>3GEKJVGV@Y<UL7G32OBRY6D3PSPR:9X6PU@GK");
    Assert.assertEquals(false, rc_boolean);
  }
  public void testItem_0219()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("32")).divideToIntegralValue(new BigDecimal("0E-2147483647"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0220()
  {
    rc_String = (new BigDecimal("32")).toString();
    Assert.assertEquals("32", rc_String);
  }
  public void testItem_0221()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("0E-2147483647")).divide(new BigDecimal("0E-2147483647"), java.math.RoundingMode.UNNECESSARY);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0222()
  {
    rc_BigDecimal = new BigDecimal(0, new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0223()
  {
    rc_BigDecimal = (new BigDecimal("32")).round(new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
//  public void testItem_0224()
//  {
//    boolean caught;
//    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), -2147483648, new MathContext("precision=1 roundingMode=FLOOR"));
//    Assert.assertEquals("3E-2147483647", rc_BigDecimal.toString());
//  }
  public void testItem_0225()
  {
    rc_BigDecimal = (new BigDecimal("0")).pow(1, new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0226()
  {
    rc_double = (new BigDecimal("0")).doubleValue();
    Assert.assertEquals(0.0, rc_double, 0);
  }
  public void testItem_0227()
  {
    rc_BigDecimal = (new BigDecimal("0")).setScale(2147483647);
    Assert.assertEquals("0E-2147483647", rc_BigDecimal.toString());
  }
  public void testItem_0228()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal_array = (new BigDecimal("0")).divideAndRemainder(new BigDecimal("0"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0229()
  {
    rc_BigDecimal = new BigDecimal(4.9E-324);
    Assert.assertEquals("4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625E-324", rc_BigDecimal.toString());
  }
  public void testItem_0230()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\234'});
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0231()
  {
    rc_BigInteger = (new BigDecimal("32")).toBigInteger();
    Assert.assertEquals("32", rc_BigInteger.toString());
  }
  public void testItem_0232()
  {
    rc_BigDecimal = new BigDecimal(-9223372036854775808L, new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("-1E+19", rc_BigDecimal.toString());
  }
  public void testItem_0233()
  {
    rc_BigInteger = (new BigDecimal("0")).toBigIntegerExact();
    Assert.assertEquals("0", rc_BigInteger.toString());
  }
  public void testItem_0234()
  {
    rc_BigDecimal = new BigDecimal(1.0);
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0235()
  {
    rc_long = (new BigDecimal("1")).longValueExact();
    Assert.assertEquals(1L, rc_long);
  }
  public void testItem_0236()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("32")).setScale(0, -1);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0237()
  {
    rc_long = (new BigDecimal("0")).longValue();
    Assert.assertEquals(0L, rc_long);
  }
  public void testItem_0238()
  {
    rc_BigDecimal = (new BigDecimal("32")).round(new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("3E+1", rc_BigDecimal.toString());
  }
  public void testItem_0239()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0240()
  {
    rc_BigDecimal = (new BigDecimal("32")).min(new BigDecimal("32"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0241()
  {
    rc_float = (new BigDecimal("3E+1")).floatValue();
    Assert.assertEquals(30.0F, rc_float, 0);
  }
  public void testItem_0242()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0243()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext(-1, java.math.RoundingMode.HALF_UP);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0244()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("32")).divide(new BigDecimal("0"), java.math.RoundingMode.CEILING);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
//  public void testItem_0245()
//  {
//    boolean caught;
//    rc_int = (new BigDecimal("32")).hashCode();
//    Assert.assertEquals(992, rc_int);
//  }
  public void testItem_0246()
  {
    rc_String = (new BigDecimal("1")).toPlainString();
    Assert.assertEquals("1", rc_String);
  }
  public void testItem_0247()
  {
    rc_BigDecimal = (new BigDecimal("32")).min(new BigDecimal("1"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0248()
  {
    rc_long = (new BigDecimal("32")).longValueExact();
    Assert.assertEquals(32L, rc_long);
  }
  public void testItem_0249()
  {
    rc_BigDecimal = new BigDecimal(9223372036854775807L);
    Assert.assertEquals("9223372036854775807", rc_BigDecimal.toString());
  }
  public void testItem_0250()
  {
    rc_BigDecimal = (new BigDecimal("0")).subtract(new BigDecimal("9223372036854775807"), new MathContext("precision=2147483647 roundingMode=CEILING"));
    Assert.assertEquals("-9223372036854775807", rc_BigDecimal.toString());
  }
  public void testItem_0251()
  {
    rc_BigDecimal = (new BigDecimal("32")).setScale(0, 1);
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0252()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\1', '\uFFFF', '\234', '\0', '8', '\0', '\0', '\0', '8', '\234', '\1', '\0', '\234', '\234', '\234', '\0', '\234', '\0', '\234', '\234', '\1', '\uFFFF', '\234', '\uFFFF', '\uFFFF', '8', '\uFFFF', '8', '\1', '\uFFFF', '8', '\1', '\uFFFF', '\1', '\234', '\234', '\uFFFF', '\0', '\uFFFF', '\uFFFF', '8', '\234', '\uFFFF', '\1', '\234', '8', '\0', '\uFFFF', '\uFFFF', '\uFFFF', '\uFFFF', '\234', '8', '\0', '\234', '\1', '\0', '\1', '\1', '\0', '\uFFFF', '\1', '\1', '\1', '\1', '\0', '\1', '\1', '8', '\234', '\uFFFF', '\234', '\uFFFF', '8', '\0', '\0', '\uFFFF', '8', '\uFFFF', '\1', '8', '\0', '\234', '\234', '\1', '\uFFFF', '\0', '\uFFFF', '\1', '8', '\uFFFF', '\1', '\0', '\234', '\0', '\uFFFF', '\uFFFF', '\234', '\1', '\234'}, -2147483648, -1, new MathContext("precision=2147483647 roundingMode=CEILING"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0253()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), 2147483647, new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("3E-2147483646", rc_BigDecimal.toString());
  }
  public void testItem_0254()
  {
    rc_BigDecimal = (new BigDecimal("0")).plus(new MathContext("precision=2147483647 roundingMode=CEILING"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
//  public void testItem_0255()
//  {
//    boolean caught;
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("3E-2147483646")).setScale(0, java.math.RoundingMode.HALF_EVEN);
//    }
//    catch (java.lang.OutOfMemoryError e) {
//      caught = true;
//    }
//    Assert.assertEquals("84.8993288590604%", true, caught);
//  }
  public void testItem_0256()
  {
    rc_String = (new BigDecimal("32")).toEngineeringString();
    Assert.assertEquals("32", rc_String);
  }
  public void testItem_0257()
  {
    rc_int = (new BigDecimal("0")).intValue();
    Assert.assertEquals(0, rc_int);
  }
  public void testItem_0258()
  {
    rc_float = (new BigDecimal("32")).floatValue();
    Assert.assertEquals(32.0F, rc_float, 0);
  }
  public void testItem_0259()
  {
    rc_float = (new BigDecimal("-9223372036854775807")).floatValue();
    Assert.assertEquals(-9.223372036854776E18F, rc_float, 0);
  }
  public void testItem_0260()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("3E-2147483646")).movePointRight(-2147483648);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0261()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'8'}, 1, -2147483648, new MathContext("precision=2147483647 roundingMode=CEILING"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0262()
  {
    rc_BigDecimal_array = (new BigDecimal("-9223372036854775807")).divideAndRemainder(new BigDecimal("32"), new MathContext("precision=0 roundingMode=UNNECESSARY"));
  }
  public void testItem_0263()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), 1, new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("3", rc_BigDecimal.toString());
  }
  public void testItem_0264()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("3V>SVHOEESV@D;8:IQV:;9Y2RX?UNG;MG@?J51G>NEH7XT09<:1GI<=P0P4UF8JIL?J9SDYNYU<<9PV>?CFYS?00@H34JR9XUFG9", new MathContext("precision=0 roundingMode=UNNECESSARY"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0265()
  {
    rc_BigDecimal = (new BigDecimal("32")).negate();
    Assert.assertEquals("-32", rc_BigDecimal.toString());
  }
  public void testItem_0266()
  {
    rc_BigDecimal = (new BigDecimal("32")).add(new BigDecimal("0"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  @SuppressWarnings("unlikely-arg-type")
  public void testItem_0267()
  {
    rc_boolean = (new BigDecimal("-32")).equals("?@FFBE80:98SXKJF1IYV;9<51Y@9UD1D6UPX9MMJAYO89IA<K3T3QH>@E7TRW<2FHMXY4RLD8NU2MYVFV84LDS<5G");
    Assert.assertEquals(false, rc_boolean);
  }
  public void testItem_0268()
  {
    rc_BigDecimal = (new BigDecimal("3E-2147483646")).add(new BigDecimal("3E-2147483646"), new MathContext("precision=2147483647 roundingMode=CEILING"));
    Assert.assertEquals("6E-2147483646", rc_BigDecimal.toString());
  }
//  public void testItem_0269()
//  {
//    boolean caught;
//    if (!Boolean.getBoolean("notanerror"))
//    {
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("6E-2147483646")).divide(new BigDecimal("6E-2147483646"));
//    }
//    catch (java.lang.ArithmeticException e) {
//      caught = true;
//    }
//    Assert.assertEquals("84.8993288590604%", true, caught);
//    }
//  }
  public void testItem_0270()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\234'}, 2147483647, 2147483647);
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0271()
  {
    rc_BigDecimal = (new BigDecimal("3E-2147483646")).subtract(new BigDecimal("3E-2147483646"), new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("0E-2147483646", rc_BigDecimal.toString());
  }
  public void testItem_0272()
  {
    rc_int = (new BigDecimal("32")).intValue();
    Assert.assertEquals(32, rc_int);
  }
  public void testItem_0273()
  {
    rc_BigDecimal = new BigDecimal(-2147483648);
    Assert.assertEquals("-2147483648", rc_BigDecimal.toString());
  }
  public void testItem_0274()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("3E-2147483646")).divide(new BigDecimal("6E-2147483646"), 2147483647, java.math.RoundingMode.UP);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0275()
  {
    rc_BigDecimal = new BigDecimal(-1L);
    Assert.assertEquals("-1", rc_BigDecimal.toString());
  }
  public void testItem_0276()
  {
    rc_int = (new BigDecimal("-2147483648")).precision();
    Assert.assertEquals(10, rc_int);
  }
  public void testItem_0277()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("6E-2147483646")).divide(new BigDecimal("-32"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0278()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("-2147483648")).divide(new BigDecimal("-1"), 0, -1);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0279()
  {
    rc_BigDecimal = (new BigDecimal("6E-2147483646")).scaleByPowerOfTen(2147483647);
    Assert.assertEquals("6E+1", rc_BigDecimal.toString());
  }
  public void testItem_0280()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("6E-2147483646")).divide(new BigDecimal("-2147483648"), 2147483647);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("84.8993288590604%", true, caught);
  }
  public void testItem_0281()
  {
    rc_int = (new BigDecimal("-2147483648")).intValueExact();
    Assert.assertEquals(-2147483648, rc_int);
  }
  public void testItem_0282()
  {
    rc_BigDecimal = (new BigDecimal("-2147483648")).multiply(new BigDecimal("6E+1"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("-1E+11", rc_BigDecimal.toString());
  }
  public void testItem_0283()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), -2147483648);
    Assert.assertEquals("3.2E+2147483649", rc_BigDecimal.toString());
  }
  public void testItem_0284()
  {
    rc_float = (new BigDecimal("-32")).floatValue();
    Assert.assertEquals(-32.0F, rc_float, 0);
  }
  public void testItem_0285()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("6E+1")).divide(new BigDecimal("6E+1"), -2147483648);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0286()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), new MathContext("precision=0 roundingMode=UNNECESSARY"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0287()
  {
    rc_BigDecimal = (new BigDecimal("-32")).plus(new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("-3E+1", rc_BigDecimal.toString());
  }
  public void testItem_0288()
  {
    rc_String = (new BigDecimal("-32")).toPlainString();
    Assert.assertEquals("-32", rc_String);
  }
  public void testItem_0289()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("-32")).divide(new BigDecimal("6E-2147483646"), 0, -1);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0290()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext("LDFT0<4=Y;ULQRI4;846H<68<1HX;1=<DWJHH302OBN93P4L=CBT7PB8<73?HTHD5E@667M91TCJ>3H<65@O8CPW=UQNLHXQ=7AN");
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0291()
  {
    rc_short = (new BigDecimal("-3E+1")).shortValueExact();
    Assert.assertEquals(-30, rc_short);
  }
//  public void testItem_0292()
//  {
//    boolean caught;
//    if (!Boolean.getBoolean("notanerror"))
//    {
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("32")).divideToIntegralValue(new BigDecimal("32"), new MathContext("precision=2147483647 roundingMode=CEILING"));
//    }
//    catch (java.lang.ArithmeticException e) {
//      caught = true;
//    }
//    Assert.assertEquals("85.23489932885906%", true, caught);
//    }
//  }
  public void testItem_0293()
  {
    rc_BigDecimal = (new BigDecimal("-3E+1")).abs(new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("3E+1", rc_BigDecimal.toString());
  }
  public void testItem_0294()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext(-1, java.math.RoundingMode.DOWN);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0295()
  {
    rc_BigDecimal_array = (new BigDecimal("-3E+1")).divideAndRemainder(new BigDecimal("-3E+1"), new MathContext("precision=1 roundingMode=FLOOR"));
  }
  public void testItem_0296()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\uFFFF'}, 2147483647, -1, new MathContext("precision=1 roundingMode=FLOOR"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0297()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("3E+1")).pow(1, new MathContext("precision=2147483647 roundingMode=CEILING"));
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0298()
  {
    rc_BigDecimal = (new BigDecimal("-32")).plus(new MathContext("precision=2147483647 roundingMode=CEILING"));
    Assert.assertEquals("-32", rc_BigDecimal.toString());
  }
  public void testItem_0299()
  {
    rc_String = (new BigDecimal("-32")).toEngineeringString();
    Assert.assertEquals("-32", rc_String);
  }
  public void testItem_0300()
  {
    rc_BigDecimal = (new BigDecimal("-2147483648")).ulp();
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0301()
  {
    rc_byte = (new BigDecimal("3E+1")).byteValueExact();
    Assert.assertEquals(30, rc_byte);
  }
  public void testItem_0302()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), 2147483647);
    Assert.assertEquals("3.2E-2147483646", rc_BigDecimal.toString());
  }
  public void testItem_0303()
  {
    rc_BigDecimal = (new BigDecimal("-3E+1")).setScale(-1, java.math.RoundingMode.HALF_DOWN);
    Assert.assertEquals("-3E+1", rc_BigDecimal.toString());
  }
  public void testItem_0304()
  {
    rc_MathContext = new MathContext(0, java.math.RoundingMode.HALF_EVEN);
    Assert.assertEquals("precision=0 roundingMode=HALF_EVEN", rc_MathContext.toString());
  }
  public void testItem_0305()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext(-2147483648);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0306()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext(-1);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0307()
  {
    rc_BigDecimal = (new BigDecimal("3.2E-2147483646")).round(new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("3E-2147483646", rc_BigDecimal.toString());
  }
  public void testItem_0308()
  {
    rc_BigDecimal = (new BigDecimal("-3E+1")).setScale(0, java.math.RoundingMode.CEILING);
    Assert.assertEquals("-30", rc_BigDecimal.toString());
  }
  public void testItem_0309()
  {
    rc_BigDecimal = (new BigDecimal("-30")).negate(new MathContext("precision=0 roundingMode=HALF_EVEN"));
    Assert.assertEquals("30", rc_BigDecimal.toString());
  }
  public void testItem_0310()
  {
    rc_BigDecimal = (new BigDecimal("-2147483648")).plus();
    Assert.assertEquals("-2147483648", rc_BigDecimal.toString());
  }
//  public void testItem_0311()
//  {
//    boolean caught;
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("-3E+1")).divide(new BigDecimal("3E+1"), 2147483647, 0);
//    }
//    catch (java.lang.NegativeArraySizeException e) {
//      caught = true;
//    }
//    Assert.assertEquals("85.23489932885906%", true, caught);
//  }
  public void testItem_0312()
  {
    rc_BigDecimal = (new BigDecimal("-2147483648")).max(new BigDecimal("-3E+1"));
    Assert.assertEquals("-3E+1", rc_BigDecimal.toString());
  }
  public void testItem_0313()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\234', '8', '\0', '\0', '8', '\234', '\uFFFF', '\1', '\234', '\234', '\0', '8', '\0', '\1', '8', '\0', '\uFFFF', '\0', '\1', '8', '\uFFFF', '\0', '\234', '\234', '\234', '\234', '\uFFFF', '8', '\234', '\1', '\uFFFF', '\uFFFF', '\0', '\0', '8', '8', '\0', '\0', '\1', '\234', '\uFFFF', '\234', '\uFFFF', '\234', '\uFFFF', '\1', '\1', '\234', '\234', '\uFFFF', '8', '\0', '\0', '\1', '\0', '\0', '\uFFFF', '\234', '\234', '\uFFFF', '\0', '8', '\234', '\uFFFF', '\uFFFF', '8', '\1', '\234', '\1', '\uFFFF', '\uFFFF', '\0', '8', '\0', '\234', '\0', '\234', '\uFFFF', '\uFFFF', '\0', '\0', '\1', '\0', '\0', '\234', '\uFFFF', '8', '\uFFFF', '\1', '\uFFFF', '\234', '\1', '\uFFFF', '8', '8', '\1', '\1', '\0', '\1', '\0'}, new MathContext("precision=2147483647 roundingMode=CEILING"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0314()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\234'}, -2147483648, 1);
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0315()
  {
    rc_BigDecimal = (new BigDecimal("-3E+1")).subtract(new BigDecimal("32"), new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("-7E+1", rc_BigDecimal.toString());
  }
  public void testItem_0316()
  {
    rc_BigDecimal = new BigDecimal(-1L);
    Assert.assertEquals("-1", rc_BigDecimal.toString());
  }
  public void testItem_0317()
  {
    rc_int = (new BigDecimal("-1")).intValueExact();
    Assert.assertEquals(-1, rc_int);
  }
  public void testItem_0318()
  {
    rc_String = (new BigDecimal("-30")).toString();
    Assert.assertEquals("-30", rc_String);
  }
  public void testItem_0319()
  {
    rc_byte = (new BigDecimal("-3E+1")).byteValueExact();
    Assert.assertEquals(-30, rc_byte);
  }
  public void testItem_0320()
  {
    rc_int = (new BigDecimal("-3E+1")).scale();
    Assert.assertEquals(-1, rc_int);
  }
  public void testItem_0321()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), 1, new MathContext("precision=0 roundingMode=HALF_EVEN"));
    Assert.assertEquals("3.2", rc_BigDecimal.toString());
  }
  public void testItem_0322()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\0'});
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0323()
  {
    rc_MathContext = new MathContext(1);
    Assert.assertEquals("precision=1 roundingMode=HALF_UP", rc_MathContext.toString());
  }
  public void testItem_0324()
  {
    rc_int = (new BigDecimal("-3E+1")).scale();
    Assert.assertEquals(-1, rc_int);
  }
  public void testItem_0325()
  {
    rc_BigDecimal = (new BigDecimal("3.2")).stripTrailingZeros();
    Assert.assertEquals("3.2", rc_BigDecimal.toString());
  }
  public void testItem_0326()
  {
    rc_BigDecimal = (new BigDecimal("-3E+1")).abs();
    Assert.assertEquals("3E+1", rc_BigDecimal.toString());
  }
  public void testItem_0327()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext(-1);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
//  public void testItem_0328()
//  {
//    boolean caught;
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("-3E+1")).divide(new BigDecimal("-1"), -2147483648, java.math.RoundingMode.UNNECESSARY);
//    }
//    catch (java.lang.NegativeArraySizeException e) {
//      caught = true;
//    }
//    Assert.assertEquals("85.23489932885906%", true, caught);
//  }
  public void testItem_0329()
  {
    rc_BigDecimal = (new BigDecimal("-3E+1")).remainder(new BigDecimal("3.2"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("-1.2", rc_BigDecimal.toString());
  }
  public void testItem_0330()
  {
    rc_int = (new BigDecimal("-3E+1")).intValue();
    Assert.assertEquals(-30, rc_int);
  }
  public void testItem_0331()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("V=AIOR8<D@35GEGOH8E46<L46GL:Q1@I7Y6Q?L;8EKU0XLW<P:@:VE<8A50M", new MathContext("precision=0 roundingMode=HALF_EVEN"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0332()
  {
    rc_double = (new BigDecimal("3E+1")).doubleValue();
    Assert.assertEquals(30.0, rc_double, 0);
  }
  public void testItem_0333()
  {
    rc_MathContext = new MathContext(2147483647, java.math.RoundingMode.FLOOR);
    Assert.assertEquals("precision=2147483647 roundingMode=FLOOR", rc_MathContext.toString());
  }
  public void testItem_0334()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("3E+1")).setScale(2147483647, -1);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0335()
  {
    rc_BigDecimal = new BigDecimal(1135879015891L);
    Assert.assertEquals("1135879015891", rc_BigDecimal.toString());
  }
  public void testItem_0336()
  {
    rc_BigDecimal = (new BigDecimal("-1")).min(new BigDecimal("-1.2"));
    Assert.assertEquals("-1.2", rc_BigDecimal.toString());
  }
  public void testItem_0337()
  {
    rc_BigDecimal = (new BigDecimal("-1.2")).plus();
    Assert.assertEquals("-1.2", rc_BigDecimal.toString());
  }
  public void testItem_0338()
  {
    rc_byte = (new BigDecimal("3E+1")).byteValueExact();
    Assert.assertEquals(30, rc_byte);
  }
  public void testItem_0339()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("1135879015891")).divideToIntegralValue(new BigDecimal("-1"), new MathContext("precision=1 roundingMode=HALF_UP"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0340()
  {
    rc_BigDecimal = new BigDecimal(-2147483648);
    Assert.assertEquals("-2147483648", rc_BigDecimal.toString());
  }
  public void testItem_0341()
  {
    rc_BigDecimal = (new BigDecimal("3E+1")).add(new BigDecimal("-2147483648"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("-2E+9", rc_BigDecimal.toString());
  }
  public void testItem_0342()
  {
    rc_BigDecimal = (new BigDecimal("-1")).abs(new MathContext("precision=0 roundingMode=HALF_EVEN"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
//  public void testItem_0343()
//  {
//    boolean caught;
//    rc_int = (new BigDecimal("-1")).hashCode();
//    Assert.assertEquals(-31, rc_int);
//  }
  public void testItem_0344()
  {
    rc_BigDecimal = (new BigDecimal("-2E+9")).max(new BigDecimal("-1"));
    Assert.assertEquals("-1", rc_BigDecimal.toString());
  }
  public void testItem_0345()
  {
    rc_int = (new BigDecimal("-2E+9")).compareTo(new BigDecimal("-3E+1"));
    Assert.assertEquals(-1, rc_int);
  }
  public void testItem_0346()
  {
    rc_BigInteger = (new BigDecimal("-3E+1")).toBigInteger();
    Assert.assertEquals("-30", rc_BigInteger.toString());
  }
  public void testItem_0347()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'8', '\234', '\234', '\234', '\234', '\234', '\234', '\0', '\uFFFF', '\1', '\1', '\1', '8', '8', '\0', '\uFFFF', '\1', '\234', '\0', '\1', '\1', '8', '\234', '\uFFFF', '\234', '\234', '\uFFFF', '\1', '\0', '\234', '\0', '\uFFFF', '\uFFFF', '\uFFFF', '8', '\uFFFF', '\1', '\234', '8', '\0', '\uFFFF', '\0', '\1', '\234', '\1', '\uFFFF', '\234', '\uFFFF', '\uFFFF', '\234', '\0', '8', '\1', '\0', '\1', '8', '\0', '\0', '\uFFFF', '\0', '\0', '\1', '\0', '\234', '\234', '\234', '\uFFFF', '\234', '\234', '\1', '8', '\234', '8', '\0', '\uFFFF', '\uFFFF', '\uFFFF', '\1', '8', '8', '8', '\234', '\234', '\1', '\234', '\1', '\uFFFF', '\0', '\0', '8', '\uFFFF', '\0', '\234', '8', '\234', '8', '\0', '\234', '\uFFFF', '\234'}, new MathContext("precision=0 roundingMode=UNNECESSARY"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0348()
  {
    rc_BigDecimal = (new BigDecimal("-2E+9")).remainder(new BigDecimal("-3E+1"));
    Assert.assertEquals("-2E+1", rc_BigDecimal.toString());
  }
  public void testItem_0349()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext(";K@T2QQ2@?BII2G7>>88ABLUPJ7Q>W0:WI7PJW52MP22=NH@MCG4BA4CUSFEI@S6LULG0OU6FG@DMMJDX@3OF5@9K");
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0350()
  {
    rc_int = (new BigDecimal("-2E+1")).compareTo(new BigDecimal("1135879015891"));
    Assert.assertEquals(-1, rc_int);
  }
  public void testItem_0351()
  {
    rc_int = (new BigDecimal("-3E+1")).compareTo(new BigDecimal("-1"));
    Assert.assertEquals(-1, rc_int);
  }
  public void testItem_0352()
  {
    rc_BigDecimal = (new BigDecimal("1135879015891")).add(new BigDecimal("-3E+1"));
    Assert.assertEquals("1135879015861", rc_BigDecimal.toString());
  }
  public void testItem_0353()
  {
    rc_BigDecimal = (new BigDecimal("1135879015861")).remainder(new BigDecimal("-2E+1"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0354()
  {
    rc_BigDecimal = (new BigDecimal("1")).divideToIntegralValue(new BigDecimal("-3E+1"), new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("0.0", rc_BigDecimal.toString());
  }
  public void testItem_0355()
  {
    rc_BigDecimal = (new BigDecimal("1135879015891")).ulp();
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
//  public void testItem_0356()
//  {
//    boolean caught;
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("-2E+1")).divide(new BigDecimal("-3E+1"), 2147483647, java.math.RoundingMode.UNNECESSARY);
//    }
//    catch (java.lang.NegativeArraySizeException e) {
//      caught = true;
//    }
//    Assert.assertEquals("85.23489932885906%", true, caught);
//  }
  public void testItem_0357()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("1135879015861")).divideToIntegralValue(new BigDecimal("0.0"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0358()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("1")).divide(new BigDecimal("0.0"), 1, 2147483647);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0359()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("-2E+1")).divide(new BigDecimal("0.0"), 1);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0360()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(":M;<EHKT4K3MLO4G:BEASWKN>4LQB=9<SL:0M93N2>YA3@?AKU26LQ58NFN@DPSA7");
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0361()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("");
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0362()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext("3GAL3I<QV;LI3?G7WDBRFTPG7?4GRX2FK?=8A<YIEA=>OSEAP928NCWDTH;6");
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0363()
  {
    rc_String = (new BigDecimal("1135879015861")).toPlainString();
    Assert.assertEquals("1135879015861", rc_String);
  }
  public void testItem_0364()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("1135879015861")).divideToIntegralValue(new BigDecimal("0.0"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0365()
  {
    rc_BigDecimal = (new BigDecimal("1")).min(new BigDecimal("1"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0366()
  {
    rc_BigDecimal = new BigDecimal(1.0, new MathContext("precision=0 roundingMode=HALF_EVEN"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0367()
  {
    rc_BigDecimal = (new BigDecimal("-2E+1")).plus(new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("-2E+1", rc_BigDecimal.toString());
  }
  @SuppressWarnings("unlikely-arg-type")
  public void testItem_0368()
  {
    rc_boolean = (new BigDecimal("0.0")).equals("LPBW8MX84");
    Assert.assertEquals(false, rc_boolean);
  }
  public void testItem_0369()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'8'}, -1, -2147483648, new MathContext("precision=0 roundingMode=UNNECESSARY"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0370()
  {
    rc_BigInteger = (new BigDecimal("1")).toBigIntegerExact();
    Assert.assertEquals("1", rc_BigInteger.toString());
  }
  public void testItem_0371()
  {
    rc_String = (new BigDecimal("1")).toString();
    Assert.assertEquals("1", rc_String);
  }
  public void testItem_0372()
  {
    rc_BigDecimal = (new BigDecimal("1")).subtract(new BigDecimal("0.0"));
    Assert.assertEquals("1.0", rc_BigDecimal.toString());
  }
  public void testItem_0373()
  {
    rc_BigDecimal = (new BigDecimal("1.0")).round(new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0374()
  {
    rc_long = (new BigDecimal("0.0")).longValue();
    Assert.assertEquals(0L, rc_long);
  }
  public void testItem_0375()
  {
    rc_BigDecimal = (new BigDecimal("1135879015861")).multiply(new BigDecimal("-2E+1"));
    Assert.assertEquals("-2.271758031722E+13", rc_BigDecimal.toString());
  }
  public void testItem_0376()
  {
    rc_MathContext = new MathContext(1);
    Assert.assertEquals("precision=1 roundingMode=HALF_UP", rc_MathContext.toString());
  }
  public void testItem_0377()
  {
    rc_BigDecimal = (new BigDecimal("1135879015861")).add(new BigDecimal("1"));
    Assert.assertEquals("1135879015862", rc_BigDecimal.toString());
  }
  public void testItem_0378()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\1'}, 1, -2147483648);
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0379()
  {
    rc_short = (new BigDecimal("1.0")).shortValueExact();
    Assert.assertEquals(1, rc_short);
  }
  public void testItem_0380()
  {
    rc_BigInteger = (new BigDecimal("1135879015862")).toBigIntegerExact();
    Assert.assertEquals("1135879015862", rc_BigInteger.toString());
  }
  public void testItem_0381()
  {
    rc_long = (new BigDecimal("-2.271758031722E+13")).longValue();
    Assert.assertEquals(-22717580317220L, rc_long);
  }
  public void testItem_0382()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("1135879015861")).setScale(2147483647, -1);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0383()
  {
    rc_int = (new BigDecimal("1.0")).precision();
    Assert.assertEquals(2, rc_int);
  }
  public void testItem_0384()
  {
    rc_BigDecimal = (new BigDecimal("-2E+1")).abs(new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("2E+1", rc_BigDecimal.toString());
  }
  public void testItem_0385()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext("QKFS3CV08AHYANIL7>Q5LQQ?<>:63T<NT1GSLSGT:PK<5X8V9LE4FN=PRJ>");
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0386()
  {
    rc_String = (new BigDecimal("1.0")).toEngineeringString();
    Assert.assertEquals("1.0", rc_String);
  }
  public void testItem_0387()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(">MV=3;E;A:?5YIQ5=3;92:K@PWG3L5Q1U?DJGP0CXKQ5JG73D8U4XQBA4RQE8>0HM9ORI:69A;=XLUCTNSU;G5?JP9J=MPOBGKR:");
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0388()
  {
    rc_String = (new BigDecimal("2E+1")).toString();
    Assert.assertEquals("2E+1", rc_String);
  }
  public void testItem_0389()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("-2.271758031722E+13")).movePointLeft(-2147483648);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0390()
  {
    rc_BigInteger = (new BigDecimal("2E+1")).toBigInteger();
    Assert.assertEquals("20", rc_BigInteger.toString());
  }
  public void testItem_0391()
  {
    rc_BigDecimal = (new BigDecimal("-2.271758031722E+13")).stripTrailingZeros();
    Assert.assertEquals("-2.271758031722E+13", rc_BigDecimal.toString());
  }
  public void testItem_0392()
  {
    rc_float = (new BigDecimal("-2.271758031722E+13")).floatValue();
    Assert.assertEquals(-2.2717579395072E13F, rc_float, 0);
  }
  public void testItem_0393()
  {
    rc_int = (new BigDecimal("1.0")).precision();
    Assert.assertEquals(2, rc_int);
  }
  public void testItem_0394()
  {
    rc_int = (new BigDecimal("2E+1")).compareTo(new BigDecimal("-2.271758031722E+13"));
    Assert.assertEquals(1, rc_int);
  }
  public void testItem_0395()
  {
    rc_BigDecimal = (new BigDecimal("1.0")).add(new BigDecimal("-2.271758031722E+13"));
    Assert.assertEquals("-22717580317219.0", rc_BigDecimal.toString());
  }
  public void testItem_0396()
  {
    rc_BigDecimal = (new BigDecimal("2E+1")).abs();
    Assert.assertEquals("2E+1", rc_BigDecimal.toString());
  }
  public void testItem_0397()
  {
    rc_BigDecimal = (new BigDecimal("-2.271758031722E+13")).plus();
    Assert.assertEquals("-2.271758031722E+13", rc_BigDecimal.toString());
  }
  public void testItem_0398()
  {
    rc_BigDecimal = (new BigDecimal("1135879015861")).divide(new BigDecimal("-2.271758031722E+13"), 0, java.math.RoundingMode.DOWN);
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0399()
  {
    rc_BigDecimal = new BigDecimal(0.0);
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0400()
  {
    rc_byte = (new BigDecimal("0")).byteValueExact();
    Assert.assertEquals(0, rc_byte);
  }
  public void testItem_0401()
  {
    rc_float = (new BigDecimal("1135879015861")).floatValue();
    Assert.assertEquals(1.135878995968E12F, rc_float, 0);
  }
  public void testItem_0402()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\234', '\0', '\0', '\234', '\1', '\1', '\uFFFF', '\uFFFF', '\0', '8', '8', '\uFFFF', '\234', '\0', '\234', '\uFFFF', '\234', '8', '\uFFFF', '8', '8', '\uFFFF', '8', '\uFFFF', '\1', '\234', '\1', '\1', '\0', '\0', '\0', '\uFFFF', '\234', '\234', '\1', '\234', '\uFFFF', '\uFFFF', '\1', '\uFFFF', '\0', '\0', '\234', '\uFFFF', '8', '8', '8', '8', '8', '\1', '\0', '8', '\234'}, new MathContext("precision=0 roundingMode=HALF_EVEN"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0403()
  {
    rc_byte = (new BigDecimal("1.0")).byteValueExact();
    Assert.assertEquals(1, rc_byte);
  }
  public void testItem_0404()
  {
    rc_BigDecimal = (new BigDecimal("1.0")).abs(new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0405()
  {
    rc_BigDecimal = new BigDecimal(-2147483648);
    Assert.assertEquals("-2147483648", rc_BigDecimal.toString());
  }
  public void testItem_0406()
  {
    rc_BigDecimal = (new BigDecimal("1135879015861")).min(new BigDecimal("-2.271758031722E+13"));
    Assert.assertEquals("-2.271758031722E+13", rc_BigDecimal.toString());
  }
  public void testItem_0407()
  {
    boolean caught;
    caught = false;
    try {
      rc_int = (new BigDecimal("-2.271758031722E+13")).intValueExact();
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0408()
  {
    boolean caught;
    caught = false;
    try {
      rc_short = (new BigDecimal("-2.271758031722E+13")).shortValueExact();
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0409()
  {
    rc_String = (new BigDecimal("-2147483648")).toEngineeringString();
    Assert.assertEquals("-2147483648", rc_String);
  }
  public void testItem_0410()
  {
    rc_BigDecimal = new BigDecimal(-9223372036854775808L);
    Assert.assertEquals("-9223372036854775808", rc_BigDecimal.toString());
  }
//  public void testItem_0411()
//  {
//    boolean caught;
//    rc_int = (new BigDecimal("1135879015861")).hashCode();
//    Assert.assertEquals(2107852787, rc_int);
//  }
  public void testItem_0412()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0413()
  {
    rc_BigDecimal = new BigDecimal(0L);
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0414()
  {
    rc_BigDecimal = (new BigDecimal("-2.271758031722E+13")).abs(new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("2E+13", rc_BigDecimal.toString());
  }
  public void testItem_0415()
  {
    rc_BigInteger = (new BigDecimal("-9223372036854775808")).toBigInteger();
    Assert.assertEquals("-9223372036854775808", rc_BigInteger.toString());
  }
  public void testItem_0416()
  {
    rc_BigDecimal = (new BigDecimal("-2.271758031722E+13")).divide(new BigDecimal("32"), new MathContext("precision=0 roundingMode=HALF_EVEN"));
    Assert.assertEquals("-709924384913.125", rc_BigDecimal.toString());
  }
  public void testItem_0417()
  {
    rc_BigDecimal = new BigDecimal(0, new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0418()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\0'}, new MathContext("precision=0 roundingMode=HALF_EVEN"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0419()
  {
    rc_BigDecimal = new BigDecimal(1.7976931348623157E308);
    Assert.assertEquals("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368", rc_BigDecimal.toString());
  }
  @SuppressWarnings("unlikely-arg-type")
  public void testItem_0420()
  {
    rc_boolean = (new BigDecimal("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368")).equals("QGPDC2YF8E4?<YUUE=5JGKBOITF2QDJSM3=RAJ74?JIT@LMA1L0=URD>C>DVO@<>CCP72C0=75QLWOO:R;I;MOVH5S8PUWUFRY<Q");
    Assert.assertEquals(false, rc_boolean);
  }
  public void testItem_0421()
  {
    rc_BigDecimal = new BigDecimal(4.9E-324);
    Assert.assertEquals("4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625E-324", rc_BigDecimal.toString());
  }
  public void testItem_0422()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("32")).divide(new BigDecimal("0"), 1);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0423()
  {
    rc_BigDecimal = new BigDecimal(9223372036854775807L, new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("9E+18", rc_BigDecimal.toString());
  }
  public void testItem_0424()
  {
    rc_String = (new BigDecimal("4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625E-324")).toPlainString();
    Assert.assertEqualsrc_String);
  }
  public void testItem_0425()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("3E+1", rc_BigDecimal.toString());
  }
  public void testItem_0426()
  {
    rc_BigDecimal_array = (new BigDecimal("-9223372036854775808")).divideAndRemainder(new BigDecimal("9E+18"));
  }
  public void testItem_0427()
  {
    rc_BigDecimal = (new BigDecimal("32")).subtract(new BigDecimal("9E+18"));
    Assert.assertEquals("-8999999999999999968", rc_BigDecimal.toString());
  }
  public void testItem_0428()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\1', '8', '\0', '\uFFFF', '\uFFFF', '8', '\uFFFF', '\1', '\0', '\uFFFF', '\uFFFF', '8', '\0', '\234', '\0', '\1', '8', '\uFFFF', '\234', '8', '\234', '\0', '\1', '\1', '\1', '8', '\uFFFF', '\1', '8', '\uFFFF', '\1', '\234', '\0', '8', '\uFFFF', '8', '\uFFFF', '\uFFFF', '\1', '\0', '\1', '\uFFFF', '\1', '8', '\1', '\1', '\0', '\0', '\uFFFF', '\uFFFF', '\1', '\1', '\uFFFF', '8', '\1'});
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0429()
  {
    rc_String = (new BigDecimal("-9223372036854775808")).toPlainString();
    Assert.assertEquals("-9223372036854775808", rc_String);
  }
  public void testItem_0430()
  {
    rc_double = (new BigDecimal("-8999999999999999968")).doubleValue();
    Assert.assertEquals(-9.0E18, rc_double, 0);
  }
  public void testItem_0431()
  {
    rc_BigDecimal = (new BigDecimal("-8999999999999999968")).multiply(new BigDecimal("-9223372036854775808"));
    Assert.assertEquals("83010348331692981976852094820647174144", rc_BigDecimal.toString());
  }
  public void testItem_0432()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("");
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.23489932885906%", true, caught);
  }
  public void testItem_0433()
  {
    rc_BigDecimal = (new BigDecimal("83010348331692981976852094820647174144")).negate();
    Assert.assertEquals("-83010348331692981976852094820647174144", rc_BigDecimal.toString());
  }
  public void testItem_0434()
  {
    rc_BigDecimal = new BigDecimal(9223372036854775807L);
    Assert.assertEquals("9223372036854775807", rc_BigDecimal.toString());
  }
  public void testItem_0435()
  {
    rc_BigDecimal = new BigDecimal(1.0);
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0436()
  {
    rc_int = (new BigDecimal("-9223372036854775808")).intValue();
    Assert.assertEquals(0, rc_int);
  }
  public void testItem_0437()
  {
    rc_BigInteger = (new BigDecimal("83010348331692981976852094820647174144")).toBigInteger();
    Assert.assertEquals("83010348331692981976852094820647174144", rc_BigInteger.toString());
  }
  public void testItem_0438()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), -1, new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("3E+2", rc_BigDecimal.toString());
  }
//  public void testItem_0439()
//  {
//    boolean caught;
//    rc_int = (new BigDecimal("3E+2")).hashCode();
//    Assert.assertEquals(91, rc_int);
//  }
  public void testItem_0440()
  {
    rc_BigDecimal = (new BigDecimal("3E+2")).stripTrailingZeros();
    Assert.assertEquals("3E+2", rc_BigDecimal.toString());
  }
  public void testItem_0441()
  {
    rc_long = (new BigDecimal("3E+2")).longValue();
    Assert.assertEquals(300L, rc_long);
  }
  public void testItem_0442()
  {
    rc_BigDecimal = (new BigDecimal("3E+2")).multiply(new BigDecimal("83010348331692981976852094820647174144"), new MathContext("precision=0 roundingMode=HALF_EVEN"));
    Assert.assertEquals("2.49031044995078945930556284461941522432E+40", rc_BigDecimal.toString());
  }
  public void testItem_0443()
  {
    rc_BigDecimal = new BigDecimal(9223372036854775807L);
    Assert.assertEquals("9223372036854775807", rc_BigDecimal.toString());
  }
  public void testItem_0444()
  {
    rc_BigDecimal = (new BigDecimal("9223372036854775807")).plus();
    Assert.assertEquals("9223372036854775807", rc_BigDecimal.toString());
  }
  public void testItem_0445()
  {
    rc_BigDecimal = (new BigDecimal("2.49031044995078945930556284461941522432E+40")).setScale(1);
    Assert.assertEquals("24903104499507894593055628446194152243200.0", rc_BigDecimal.toString());
  }
  public void testItem_0446()
  {
    rc_BigDecimal = (new BigDecimal("24903104499507894593055628446194152243200.0")).divide(new BigDecimal("3E+2"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("8E+37", rc_BigDecimal.toString());
  }
  public void testItem_0447()
  {
    rc_String = (new BigDecimal("83010348331692981976852094820647174144")).toPlainString();
    Assert.assertEquals("83010348331692981976852094820647174144", rc_String);
  }
  public void testItem_0448()
  {
    rc_double = (new BigDecimal("83010348331692981976852094820647174144")).doubleValue();
    Assert.assertEquals(8.301034833169298E37, rc_double, 0);
  }
  public void testItem_0449()
  {
    rc_BigInteger = (new BigDecimal("8E+37")).toBigInteger();
    Assert.assertEquals("80000000000000000000000000000000000000", rc_BigInteger.toString());
  }
  public void testItem_0450()
  {
    rc_BigDecimal = new BigDecimal(1L);
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0451()
  {
    rc_long = (new BigDecimal("1")).longValue();
    Assert.assertEquals(1L, rc_long);
  }
  public void testItem_0452()
  {
    rc_BigDecimal = (new BigDecimal("9223372036854775807")).remainder(new BigDecimal("24903104499507894593055628446194152243200.0"), new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("9223372036854775807", rc_BigDecimal.toString());
  }
  public void testItem_0453()
  {
    rc_BigDecimal = (new BigDecimal("1")).round(new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0454()
  {
    rc_BigDecimal = (new BigDecimal("9223372036854775807")).divide(new BigDecimal("24903104499507894593055628446194152243200.0"), 0);
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0455()
  {
    rc_BigDecimal = (new BigDecimal("9223372036854775807")).plus(new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("9E+18", rc_BigDecimal.toString());
  }
  public void testItem_0456()
  {
    rc_BigDecimal = (new BigDecimal("9223372036854775807")).subtract(new BigDecimal("9223372036854775807"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0457()
  {
    rc_BigDecimal = new BigDecimal(1135879015891L);
    Assert.assertEquals("1135879015891", rc_BigDecimal.toString());
  }
  public void testItem_0458()
  {
    rc_BigDecimal = (new BigDecimal("24903104499507894593055628446194152243200.0")).remainder(new BigDecimal("9223372036854775807"));
    Assert.assertEquals("6775365238405454756.0", rc_BigDecimal.toString());
  }
  public void testItem_0459()
  {
    boolean caught;
    caught = false;
    try {
      rc_short = (new BigDecimal("9223372036854775807")).shortValueExact();
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0460()
  {
    boolean caught;
    caught = false;
    try {
      rc_short = (new BigDecimal("9223372036854775807")).shortValueExact();
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0461()
  {
    rc_BigDecimal = (new BigDecimal("0")).plus();
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0462()
  {
    rc_BigDecimal = (new BigDecimal("9223372036854775807")).pow(-1, new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("1E-19", rc_BigDecimal.toString());
  }
  public void testItem_0463()
  {
    rc_BigDecimal = (new BigDecimal("1E-19")).scaleByPowerOfTen(0);
    Assert.assertEquals("1E-19", rc_BigDecimal.toString());
  }
  public void testItem_0464()
  {
    boolean caught;
    caught = false;
    try {
      rc_short = (new BigDecimal("9223372036854775807")).shortValueExact();
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0465()
  {
    rc_BigDecimal = (new BigDecimal("1E-19")).divideToIntegralValue(new BigDecimal("9223372036854775807"));
    Assert.assertEquals("0E-19", rc_BigDecimal.toString());
  }
  public void testItem_0466()
  {
    rc_int = (new BigDecimal("0E-19")).intValue();
    Assert.assertEquals(0, rc_int);
  }
  public void testItem_0467()
  {
    rc_BigDecimal = (new BigDecimal("0E-19")).plus(new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("0E-19", rc_BigDecimal.toString());
  }
  public void testItem_0468()
  {
    rc_int = (new BigDecimal("9223372036854775807")).compareTo(new BigDecimal("9223372036854775807"));
    Assert.assertEquals(0, rc_int);
  }
  public void testItem_0469()
  {
    boolean caught;
    caught = false;
    try {
      rc_short = (new BigDecimal("6775365238405454756.0")).shortValueExact();
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0470()
  {
    rc_float = (new BigDecimal("1E-19")).floatValue();
    Assert.assertEquals(9.999999682655225E-20F, rc_float, 0);
  }
  public void testItem_0471()
  {
    rc_BigDecimal = (new BigDecimal("9223372036854775807")).round(new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("9E+18", rc_BigDecimal.toString());
  }
  public void testItem_0472()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext(-2147483648);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0473()
  {
    boolean caught;
    caught = false;
    try {
      rc_int = (new BigDecimal("1E-19")).intValueExact();
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0474()
  {
    rc_BigDecimal = (new BigDecimal("9223372036854775807")).add(new BigDecimal("9223372036854775807"), new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("1E+19", rc_BigDecimal.toString());
  }
  public void testItem_0475()
  {
    rc_BigDecimal = (new BigDecimal("9E+18")).remainder(new BigDecimal("1E-19"));
    Assert.assertEquals("0E+18", rc_BigDecimal.toString());
  }
  public void testItem_0476()
  {
    rc_BigDecimal = (new BigDecimal("6775365238405454756.0")).multiply(new BigDecimal("9E+18"));
    Assert.assertEquals("6.09782871456490928040E+37", rc_BigDecimal.toString());
  }
  public void testItem_0477()
  {
    rc_BigDecimal = (new BigDecimal("9E+18")).min(new BigDecimal("6775365238405454756.0"));
    Assert.assertEquals("6775365238405454756.0", rc_BigDecimal.toString());
  }
  public void testItem_0478()
  {
    rc_BigDecimal = (new BigDecimal("6775365238405454756.0")).stripTrailingZeros();
    Assert.assertEquals("6775365238405454756", rc_BigDecimal.toString());
  }
  public void testItem_0479()
  {
    boolean caught;
    caught = false;
    try {
      rc_short = (new BigDecimal("6775365238405454756")).shortValueExact();
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0480()
  {
    rc_BigDecimal = (new BigDecimal("9E+18")).stripTrailingZeros();
    Assert.assertEquals("9E+18", rc_BigDecimal.toString());
  }
  public void testItem_0481()
  {
    rc_float = (new BigDecimal("1E-19")).floatValue();
    Assert.assertEquals(9.999999682655225E-20F, rc_float, 0);
  }
  public void testItem_0482()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), 2147483647);
    Assert.assertEquals("3.2E-2147483646", rc_BigDecimal.toString());
  }
  public void testItem_0483()
  {
    rc_BigDecimal = (new BigDecimal("1E-19")).divide(new BigDecimal("1E-19"), 0);
    Assert.assertEquals("1.0000000000000000000", rc_BigDecimal.toString());
  }
  public void testItem_0484()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("6775365238405454756")).divideToIntegralValue(new BigDecimal("1.0000000000000000000"), new MathContext("precision=1 roundingMode=HALF_UP"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0485()
  {
    rc_BigDecimal = (new BigDecimal("1E-19")).ulp();
    Assert.assertEquals("1E-19", rc_BigDecimal.toString());
  }
  public void testItem_0486()
  {
    rc_BigDecimal = (new BigDecimal("1.0000000000000000000")).subtract(new BigDecimal("1E-19"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0487()
  {
    rc_BigDecimal = (new BigDecimal("1.0000000000000000000")).abs(new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0488()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("1")).divide(new BigDecimal("6775365238405454756.0"), -2147483648, java.math.RoundingMode.HALF_EVEN);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0489()
  {
    rc_BigDecimal = new BigDecimal(-2147483648);
    Assert.assertEquals("-2147483648", rc_BigDecimal.toString());
  }
  public void testItem_0490()
  {
    rc_BigDecimal = new BigDecimal(1L);
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0491()
  {
    rc_BigDecimal = new BigDecimal(-9223372036854775808L);
    Assert.assertEquals("-9223372036854775808", rc_BigDecimal.toString());
  }
  public void testItem_0492()
  {
    rc_BigDecimal = (new BigDecimal("1E-19")).remainder(new BigDecimal("1"));
    Assert.assertEquals("1E-19", rc_BigDecimal.toString());
  }
  public void testItem_0493()
  {
    rc_String = (new BigDecimal("1E-19")).toPlainString();
    Assert.assertEquals("0.0000000000000000001", rc_String);
  }
  public void testItem_0494()
  {
    rc_long = (new BigDecimal("9E+18")).longValueExact();
    Assert.assertEquals(9000000000000000000L, rc_long);
  }
  public void testItem_0495()
  {
    rc_String = (new BigDecimal("1E-19")).toPlainString();
    Assert.assertEquals("0.0000000000000000001", rc_String);
  }
  public void testItem_0496()
  {
    rc_BigDecimal = (new BigDecimal("1E-19")).abs();
    Assert.assertEquals("1E-19", rc_BigDecimal.toString());
  }
  public void testItem_0497()
  {
    rc_BigDecimal = (new BigDecimal("1E-19")).min(new BigDecimal("1E-19"));
    Assert.assertEquals("1E-19", rc_BigDecimal.toString());
  }
  public void testItem_0498()
  {
    rc_BigDecimal = (new BigDecimal("9E+18")).movePointRight(0);
    if (JavaSpecVersionChecker.isJDKWithin13And19()) {
    	 Assert.assertEquals("9E+18", rc_BigDecimal.toString());
    } else { 
    	Assert.assertEquals("9000000000000000000", rc_BigDecimal.toString());
    }
  }
  public void testItem_0499()
  {
    rc_BigDecimal = (new BigDecimal("9000000000000000000")).divide(new BigDecimal("9E+18"));
    Assert.assertEquals("1.000000000000000000", rc_BigDecimal.toString());
  }
  public void testItem_0500()
  {
    rc_int = (new BigDecimal("1E-19")).precision();
    Assert.assertEquals(1, rc_int);
  }
  public void testItem_0501()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'8'}, 2147483647, -1);
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0502()
  {
    rc_BigDecimal = (new BigDecimal("1E-19")).negate(new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("-1E-19", rc_BigDecimal.toString());
  }
  public void testItem_0503()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("9E+18")).scaleByPowerOfTen(2147483647);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0504()
  {
    rc_int = (new BigDecimal("1.000000000000000000")).scale();
    Assert.assertEquals(18, rc_int);
  }
  public void testItem_0505()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("?JV7FFI9WJCGLWG8ETES=1603PIOT7<>MS9OI1Y");
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0506()
  {
    rc_long = (new BigDecimal("6775365238405454756.0")).longValue();
    Assert.assertEquals(6775365238405454756L, rc_long);
  }
  public void testItem_0507()
  {
    rc_BigDecimal = new BigDecimal(-1.0);
    Assert.assertEquals("-1", rc_BigDecimal.toString());
  }
  public void testItem_0508()
  {
    rc_BigInteger = (new BigDecimal("-1")).toBigInteger();
    Assert.assertEquals("-1", rc_BigInteger.toString());
  }
  public void testItem_0509()
  {
    rc_BigDecimal = (new BigDecimal("1.000000000000000000")).plus(new MathContext("precision=0 roundingMode=HALF_EVEN"));
    Assert.assertEquals("1.000000000000000000", rc_BigDecimal.toString());
  }
  public void testItem_0510()
  {
    rc_BigDecimal = (new BigDecimal("1.000000000000000000")).multiply(new BigDecimal("-1"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("-1", rc_BigDecimal.toString());
  }
  public void testItem_0511()
  {
    rc_BigDecimal = new BigDecimal(2147483647);
    Assert.assertEquals("2147483647", rc_BigDecimal.toString());
  }
  public void testItem_0512()
  {
    rc_BigDecimal = (new BigDecimal("2147483647")).remainder(new BigDecimal("2147483647"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0513()
  {
    rc_BigDecimal = new BigDecimal(0, new MathContext("precision=0 roundingMode=HALF_EVEN"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0514()
  {
    rc_BigDecimal = (new BigDecimal("-1")).pow(-1, new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("-1", rc_BigDecimal.toString());
  }
  public void testItem_0515()
  {
    rc_BigDecimal = (new BigDecimal("2147483647")).abs();
    Assert.assertEquals("2147483647", rc_BigDecimal.toString());
  }
  public void testItem_0516()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), -1);
    Assert.assertEquals("3.2E+2", rc_BigDecimal.toString());
  }
  public void testItem_0517()
  {
    rc_BigDecimal = (new BigDecimal("-1")).divideToIntegralValue(new BigDecimal("3.2E+2"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("0.0", rc_BigDecimal.toString());
  }
  public void testItem_0518()
  {
    rc_int = (new BigDecimal("0.0")).signum();
    Assert.assertEquals(0, rc_int);
  }
  public void testItem_0519()
  {
    rc_String = (new BigDecimal("-1")).toEngineeringString();
    Assert.assertEquals("-1", rc_String);
  }
  public void testItem_0520()
  {
    rc_int = (new BigDecimal("-1")).compareTo(new BigDecimal("-1"));
    Assert.assertEquals(0, rc_int);
  }
  public void testItem_0521()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0522()
  {
    rc_BigDecimal = (new BigDecimal("-1")).setScale(0, java.math.RoundingMode.UP);
    Assert.assertEquals("-1", rc_BigDecimal.toString());
  }
  public void testItem_0523()
  {
    rc_BigDecimal = (new BigDecimal("-1")).divideToIntegralValue(new BigDecimal("-1"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0524()
  {
    rc_BigDecimal = (new BigDecimal("-1")).divide(new BigDecimal("-1"), 0, java.math.RoundingMode.HALF_DOWN);
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0525()
  {
    rc_BigDecimal = (new BigDecimal("0")).add(new BigDecimal("1"), new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0526()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("0.0")).divide(new BigDecimal("1"), 1, -2147483648);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0527()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("8MHM17WCOR@<9ANF5MK5DLSIOWDQ817JFHJS3RDUKBO=N21X<VXWKIQ=OQ71J5F:2AGN2ETX6DWL8VK9WF46=YK=8CQVKO>E82<W");
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  @SuppressWarnings("unlikely-arg-type")
  public void testItem_0528()
  {
    rc_boolean = (new BigDecimal("0.0")).equals("I0@Y4:?73NHNKYT?87E@A1LHVF14:;N72SDV7W4WP@R=TOE>LS3KWH");
    Assert.assertEquals(false, rc_boolean);
  }
  public void testItem_0529()
  {
    rc_BigDecimal = new BigDecimal(-1L);
    Assert.assertEquals("-1", rc_BigDecimal.toString());
  }
  public void testItem_0530()
  {
    rc_int = (new BigDecimal("-1")).scale();
    Assert.assertEquals(0, rc_int);
  }
  public void testItem_0531()
  {
    rc_double = (new BigDecimal("1")).doubleValue();
    Assert.assertEquals(1.0, rc_double, 0);
  }
  public void testItem_0532()
  {
    rc_BigDecimal = new BigDecimal(2147483647);
    Assert.assertEquals("2147483647", rc_BigDecimal.toString());
  }
  public void testItem_0533()
  {
    rc_BigDecimal = (new BigDecimal("2147483647")).negate(new MathContext("precision=0 roundingMode=HALF_EVEN"));
    Assert.assertEquals("-2147483647", rc_BigDecimal.toString());
  }
  public void testItem_0534()
  {
    rc_double = (new BigDecimal("-1")).doubleValue();
    Assert.assertEquals(-1.0, rc_double, 0);
  }
  public void testItem_0535()
  {
    rc_BigDecimal = (new BigDecimal("0.0")).divideToIntegralValue(new BigDecimal("2147483647"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("0.0", rc_BigDecimal.toString());
  }
  public void testItem_0536()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("X4BYA4VS3RFJ8QL;YOHW>DS1NN0V@?692AM=8FB<=LPEB?LRXOMY;IPYJ<=KF?3LWL4YY<CI;8<JY5VM>GA:T1G41Q");
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0537()
  {
    rc_byte = (new BigDecimal("1")).byteValueExact();
    Assert.assertEquals(1, rc_byte);
  }
  public void testItem_0538()
  {
    rc_long = (new BigDecimal("-2147483647")).longValueExact();
    Assert.assertEquals(-2147483647L, rc_long);
  }
  public void testItem_0539()
  {
    rc_MathContext = new MathContext(0);
    Assert.assertEquals("precision=0 roundingMode=HALF_UP", rc_MathContext.toString());
  }
  public void testItem_0540()
  {
    rc_BigDecimal = (new BigDecimal("2147483647")).plus(new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("2E+9", rc_BigDecimal.toString());
  }
  public void testItem_0541()
  {
    rc_BigDecimal = (new BigDecimal("0.0")).divide(new BigDecimal("1"), java.math.RoundingMode.CEILING);
    Assert.assertEquals("0.0", rc_BigDecimal.toString());
  }
  public void testItem_0542()
  {
    rc_BigDecimal = (new BigDecimal("-2147483647")).multiply(new BigDecimal("0.0"));
    Assert.assertEquals("0.0", rc_BigDecimal.toString());
  }
  public void testItem_0543()
  {
    rc_String = (new BigDecimal("0.0")).toString();
    Assert.assertEquals("0.0", rc_String);
  }
  public void testItem_0544()
  {
    rc_BigDecimal = (new BigDecimal("0.0")).negate(new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("0.0", rc_BigDecimal.toString());
  }
  public void testItem_0545()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("665OA1QBEB:TV;?WHBWN3@=39S78<Q:>BI>SS9<YLD=9J<<LI;BCWLTMKFD0M8:4HV9XGTW8HRR:L<<M1D1TGYL@SIYQ1>U5HE6;", new MathContext("precision=1 roundingMode=FLOOR"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
//  public void testItem_0546()
//  {
//    boolean caught;
//    if (!Boolean.getBoolean("notanerror"))
//    {
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("0.0")).divide(new BigDecimal("-2147483647"), -2147483648, 0);
//    }
//    catch (java.lang.NegativeArraySizeException e) {
//      caught = true;
//    }
//    Assert.assertEquals("85.57046979865771%", true, caught);
//    }
//  }
  public void testItem_0547()
  {
    rc_BigDecimal_array = (new BigDecimal("0.0")).divideAndRemainder(new BigDecimal("-2147483647"));
  }
  public void testItem_0548()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0549()
  {
    rc_BigDecimal = (new BigDecimal("0.0")).plus(new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("0.0", rc_BigDecimal.toString());
  }
  public void testItem_0550()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'8'}, -2147483648, 2147483647);
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0551()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("2E+9")).pow(2147483647, new MathContext("precision=0 roundingMode=HALF_UP"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0552()
  {
    rc_BigDecimal = new BigDecimal(-9223372036854775808L);
    Assert.assertEquals("-9223372036854775808", rc_BigDecimal.toString());
  }
  public void testItem_0553()
  {
    rc_BigDecimal = (new BigDecimal("2E+9")).divide(new BigDecimal("2E+9"), new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0554()
  {
    rc_BigDecimal = (new BigDecimal("32")).divide(new BigDecimal("2E+9"));
    Assert.assertEquals("1.6E-8", rc_BigDecimal.toString());
  }
  public void testItem_0555()
  {
    rc_int = (new BigDecimal("-9223372036854775808")).scale();
    Assert.assertEquals(0, rc_int);
  }
  public void testItem_0556()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), 2147483647);
    Assert.assertEquals("3.2E-2147483646", rc_BigDecimal.toString());
  }
//  public void testItem_0557()
//  {
//    boolean caught;
//    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), -2147483648, new MathContext("precision=1 roundingMode=FLOOR"));
//    Assert.assertEquals("3E-2147483647", rc_BigDecimal.toString());
//  }
  public void testItem_0558()
  {
    rc_MathContext = new MathContext(2147483647, java.math.RoundingMode.FLOOR);
    Assert.assertEquals("precision=2147483647 roundingMode=FLOOR", rc_MathContext.toString());
  }
  public void testItem_0559()
  {
    rc_BigDecimal = (new BigDecimal("3.2E-2147483646")).subtract(new BigDecimal("1.6E-8"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("-2E-8", rc_BigDecimal.toString());
  }
  public void testItem_0560()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("1")).scaleByPowerOfTen(-2147483648);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0561()
  {
    rc_int = (new BigDecimal("-2E-8")).scale();
    Assert.assertEquals(8, rc_int);
  }
  public void testItem_0562()
  {
    boolean caught;
    caught = false;
    try {
      rc_short = (new BigDecimal("-9223372036854775808")).shortValueExact();
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0563()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("F>XS19Q7H78HRF9>>FXL=2:BQ@WR62N3ENUCQ;4B60RVF2M9G5DQL62JCNO9S>TNOD74IY:D85P7Q3=AUC2GFB@A@1BHWTOD=JP5");
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0564()
  {
    rc_BigDecimal_array = (new BigDecimal("-2E-8")).divideAndRemainder(new BigDecimal("32"));
  }
  public void testItem_0565()
  {
    rc_BigDecimal = (new BigDecimal("-2E-8")).subtract(new BigDecimal("1"));
    Assert.assertEquals("-1.00000002", rc_BigDecimal.toString());
  }
//  public void testItem_0566()
//  {
//    boolean caught;
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("1")).subtract(new BigDecimal("3.2E-2147483646"));
//    }
//    catch (java.lang.NegativeArraySizeException e) {
//      caught = true;
//    }
//    Assert.assertEquals("85.57046979865771%", true, caught);
//  }
  public void testItem_0567()
  {
    rc_BigDecimal = (new BigDecimal("1")).multiply(new BigDecimal("-9223372036854775808"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("-9E+18", rc_BigDecimal.toString());
  }
  public void testItem_0568()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), 2147483647, new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("3E-2147483646", rc_BigDecimal.toString());
  }
  public void testItem_0569()
  {
    rc_BigDecimal = new BigDecimal(1.7976931348623157E308, new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("2E+308", rc_BigDecimal.toString());
  }
  public void testItem_0570()
  {
    rc_BigDecimal = (new BigDecimal("2E+308")).plus(new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("2E+308", rc_BigDecimal.toString());
  }
  public void testItem_0571()
  {
    rc_BigDecimal = (new BigDecimal("32")).subtract(new BigDecimal("-2E-8"), new MathContext("precision=2147483647 roundingMode=FLOOR"));
    Assert.assertEquals("32.00000002", rc_BigDecimal.toString());
  }
  public void testItem_0572()
  {
    rc_BigDecimal = (new BigDecimal("-2E-8")).divideToIntegralValue(new BigDecimal("32.00000002"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0573()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("3.2E-2147483646")).divide(new BigDecimal("0"), 0, 2147483647);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0574()
  {
    rc_BigInteger = (new BigDecimal("2E+308")).unscaledValue();
    Assert.assertEquals("2", rc_BigInteger.toString());
  }
  public void testItem_0575()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), -1);
    Assert.assertEquals("3.2E+2", rc_BigDecimal.toString());
  }
//  public void testItem_0576()
//  {
//    boolean caught;
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("32.00000002")).subtract(new BigDecimal("3.2E-2147483646"));
//    }
//    catch (java.lang.OutOfMemoryError e) {
//      caught = true;
//    }
//    Assert.assertEquals("85.57046979865771%", true, caught);
//  }
  public void testItem_0577()
  {
    rc_MathContext = new MathContext(0, java.math.RoundingMode.HALF_DOWN);
    Assert.assertEquals("precision=0 roundingMode=HALF_DOWN", rc_MathContext.toString());
  }
  public void testItem_0578()
  {
    rc_BigDecimal = new BigDecimal(9223372036854775807L, new MathContext("precision=1 roundingMode=FLOOR"));
    Assert.assertEquals("9E+18", rc_BigDecimal.toString());
  }
  public void testItem_0579()
  {
    rc_BigDecimal = new BigDecimal(new char[]{'8', '\uFFFF', '\uFFFF', '\234', '\uFFFF', '8', '8', '\uFFFF', '\0', '\234', '\1', '\1', '8', '\1', '\1', '\234', '\234', '8', '8', '\uFFFF', '\0', '\234', '\uFFFF', '8', '8', '\1', '\uFFFF', '\uFFFF', '\1', '8', '\uFFFF', '\0', '\0', '8', '\0', '\234'}, 0, 1, new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("8", rc_BigDecimal.toString());
  }
  public void testItem_0580()
  {
    rc_BigInteger = (new BigDecimal("9E+18")).unscaledValue();
    Assert.assertEquals("9", rc_BigInteger.toString());
  }
  public void testItem_0581()
  {
    rc_BigDecimal = (new BigDecimal("8")).negate();
    Assert.assertEquals("-8", rc_BigDecimal.toString());
  }
  public void testItem_0582()
  {
    rc_BigDecimal = (new BigDecimal("-8")).divideToIntegralValue(new BigDecimal("32.00000002"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("0E+8", rc_BigDecimal.toString());
  }
  public void testItem_0583()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("8")).divide(new BigDecimal("32.00000002"), 0, 2147483647);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0584()
  {
    rc_MathContext = new MathContext(1, java.math.RoundingMode.DOWN);
    Assert.assertEquals("precision=1 roundingMode=DOWN", rc_MathContext.toString());
  }
  public void testItem_0585()
  {
    rc_BigDecimal = (new BigDecimal("32")).round(new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("3E+1", rc_BigDecimal.toString());
  }
  public void testItem_0586()
  {
    rc_BigDecimal = (new BigDecimal("32.00000002")).remainder(new BigDecimal("3E+1"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("2.00000002", rc_BigDecimal.toString());
  }
  public void testItem_0587()
  {
    rc_BigDecimal = (new BigDecimal("9E+18")).multiply(new BigDecimal("0E+8"));
    Assert.assertEquals("0E+26", rc_BigDecimal.toString());
  }
  public void testItem_0588()
  {
    rc_BigDecimal = (new BigDecimal("0E+8")).divide(new BigDecimal("9E+18"));
    Assert.assertEquals("0E-10", rc_BigDecimal.toString());
  }
  public void testItem_0589()
  {
    rc_BigDecimal = (new BigDecimal("8")).multiply(new BigDecimal("8"), new MathContext("precision=1 roundingMode=DOWN"));
    Assert.assertEquals("6E+1", rc_BigDecimal.toString());
  }
  public void testItem_0590()
  {
    rc_long = (new BigDecimal("0E+8")).longValue();
    Assert.assertEquals(0L, rc_long);
  }
  public void testItem_0591()
  {
    rc_MathContext = new MathContext(0);
    Assert.assertEquals("precision=0 roundingMode=HALF_UP", rc_MathContext.toString());
  }
  public void testItem_0592()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal_array = (new BigDecimal("0E-10")).divideAndRemainder(new BigDecimal("0E+8"), new MathContext("precision=0 roundingMode=HALF_UP"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0593()
  {
    rc_BigDecimal = (new BigDecimal("8")).add(new BigDecimal("9E+18"), new MathContext("precision=1 roundingMode=DOWN"));
    Assert.assertEquals("9E+18", rc_BigDecimal.toString());
  }
  public void testItem_0594()
  {
    rc_BigDecimal = (new BigDecimal("0E-10")).divideToIntegralValue(new BigDecimal("6E+1"));
    Assert.assertEquals("0E-11", rc_BigDecimal.toString());
  }
  public void testItem_0595()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'8', '\234', '\0', '8', '\1', '\0', '\1', '\0', '8', '\1', '\uFFFF', '\uFFFF', '\1', '\234', '\1', '\0', '\1', '\234', '8', '\0', '\uFFFF', '8', '\0', '\uFFFF', '\234', '\1', '\0', '\uFFFF', '\234', '\0', '8', '\0', '\234', '\uFFFF', '\1', '8', '\234', '\0', '\0', '\234', '\0', '\0', '\uFFFF', '\1', '\234', '\0', '8', '\uFFFF', '\uFFFF', '8', '\uFFFF', '\0', '\uFFFF', '\234', '\uFFFF', '8', '\0', '\1', '\234', '\1', '\0', '\1', '\uFFFF', '\uFFFF', '\1', '\0', '8', '\uFFFF', '\0', '\0', '\234', '\234', '8', '\0', '\0', '\uFFFF', '8', '\uFFFF', '8', '\uFFFF', '\uFFFF', '\0', '\1', '\1', '\uFFFF', '\1', '\234', '\234', '\234', '\uFFFF', '\uFFFF', '\0', '\0', '\0', '\uFFFF', '\234', '\1', '\0', '\0', '\0'}, new MathContext("precision=1 roundingMode=HALF_UP"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0596()
  {
    rc_String = (new BigDecimal("9E+18")).toString();
    Assert.assertEquals("9E+18", rc_String);
  }
  public void testItem_0597()
  {
    rc_BigDecimal = (new BigDecimal("0E-11")).movePointLeft(-1);
    Assert.assertEquals("0E-10", rc_BigDecimal.toString());
  }
  public void testItem_0598()
  {
    rc_String = (new BigDecimal("9E+18")).toEngineeringString();
    Assert.assertEquals("9E+18", rc_String);
  }
//  public void testItem_0599()
//  {
//    boolean caught;
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("0E-10")).divide(new BigDecimal("0E-10"), 2147483647, 0);
//    }
//    catch (java.lang.ArithmeticException e) {
//      caught = true;
//    }
//    Assert.assertEquals("85.57046979865771%", true, caught);
//  }
  public void testItem_0600()
  {
    rc_int = (new BigDecimal("9E+18")).intValue();
    Assert.assertEquals(-494665728, rc_int);
  }
//  public void testItem_0601()
//  {
//    boolean caught;
//    rc_int = (new BigDecimal("0E+8")).hashCode();
//    Assert.assertEquals(-8, rc_int);
//  }
  @SuppressWarnings("unlikely-arg-type")
  public void testItem_0602()
  {
    rc_boolean = (new BigDecimal("0E-11")).equals("N554@>:93SG4;;>8LV8FK=LT8F0V><FI7STLIEMIV00K<NU=@C;;:<YW6P4?B8TFY@KA634?<FOLFK3PQ7RWI=CIDP?H4WUYIRE?");
    Assert.assertEquals(false, rc_boolean);
  }
  public void testItem_0603()
  {
    rc_BigDecimal = (new BigDecimal("9E+18")).movePointLeft(0);
    if (JavaSpecVersionChecker.isJDKWithin13And19()) {
    	 Assert.assertEquals("9E+18", rc_BigDecimal.toString());
    } else {
    	 Assert.assertEquals("9000000000000000000", rc_BigDecimal.toString());
    }  
  }
  public void testItem_0604()
  {
    rc_BigDecimal = (new BigDecimal("0E+8")).setScale(-2147483648);
    Assert.assertEquals("0E+2147483648", rc_BigDecimal.toString());
  }
  public void testItem_0605()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("");
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0606()
  {
    rc_BigDecimal = (new BigDecimal("0E-11")).stripTrailingZeros();
	Assert.assertEquals(0E-11, rc_BigDecimal.doubleValue(), 0);
  }
  public void testItem_0607()
  {
    rc_MathContext = new MathContext(0);
    Assert.assertEquals("precision=0 roundingMode=HALF_UP", rc_MathContext.toString());
  }
  public void testItem_0608()
  {
    boolean caught;
    caught = false;
    try {
      rc_byte = (new BigDecimal("9000000000000000000")).byteValueExact();
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0609()
  {
    rc_int = (new BigDecimal("0E-11")).scale();
    Assert.assertEquals(11, rc_int);
  }
  public void testItem_0610()
  {
    rc_MathContext = new MathContext(1);
    Assert.assertEquals("precision=1 roundingMode=HALF_UP", rc_MathContext.toString());
  }
  public void testItem_0611()
  {
    rc_int = (new BigDecimal("0E+8")).intValueExact();
    Assert.assertEquals(0, rc_int);
  }
  public void testItem_0612()
  {
    rc_int = (new BigDecimal("0E+8")).signum();
    Assert.assertEquals(0, rc_int);
  }
  public void testItem_0613()
  {
    rc_BigDecimal = (new BigDecimal("0E+8")).max(new BigDecimal("0E-11"));
    Assert.assertEquals("0E+8", rc_BigDecimal.toString());
  }
  public void testItem_0614()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext(-2147483648, java.math.RoundingMode.CEILING);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0615()
  {
    rc_BigDecimal = (new BigDecimal("0E-11")).multiply(new BigDecimal("0E-11"), new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("0E-22", rc_BigDecimal.toString());
  }
  public void testItem_0616()
  {
    rc_BigDecimal = (new BigDecimal("0E-11")).multiply(new BigDecimal("0E+8"));
    Assert.assertEquals("0.000", rc_BigDecimal.toString());
  }
  public void testItem_0617()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("0E-11")).divide(new BigDecimal("0E-11"), new MathContext("precision=0 roundingMode=HALF_UP"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0618()
  {
    rc_BigDecimal = (new BigDecimal("0E-11")).subtract(new BigDecimal("0.000"), new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("0E-11", rc_BigDecimal.toString());
  }
  public void testItem_0619()
  {
    rc_BigDecimal = (new BigDecimal("0.000")).ulp();
    Assert.assertEquals("0.001", rc_BigDecimal.toString());
  }
  public void testItem_0620()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("GKBFAR0QKYLDP>16TD6<JYOLICNQI223:;8N:XH1S?KIUA::VWK35TJGO?02IBF5R;U5R=>QH7MF3QXAC>367I<11M;>1>WKIH>K");
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0621()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("0.001")).setScale(1, 2147483647);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0622()
  {
    rc_BigDecimal = new BigDecimal(1.7976931348623157E308, new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("2E+308", rc_BigDecimal.toString());
  }
  public void testItem_0623()
  {
    rc_int = (new BigDecimal("0E+8")).compareTo(new BigDecimal("2E+308"));
    Assert.assertEquals(-1, rc_int);
  }
  public void testItem_0624()
  {
    rc_BigDecimal = (new BigDecimal("0E-11")).subtract(new BigDecimal("0.001"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("-0.001", rc_BigDecimal.toString());
  }
  public void testItem_0625()
  {
    rc_long = (new BigDecimal("0.000")).longValueExact();
    Assert.assertEquals(0L, rc_long);
  }
  public void testItem_0626()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), 0, new MathContext("precision=1 roundingMode=DOWN"));
    Assert.assertEquals("3E+1", rc_BigDecimal.toString());
  }
  public void testItem_0627()
  {
    rc_BigDecimal = new BigDecimal(0L);
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0628()
  {
    rc_BigDecimal = (new BigDecimal("0")).multiply(new BigDecimal("0E+8"));
    Assert.assertEquals("0E+8", rc_BigDecimal.toString());
  }
  public void testItem_0629()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal_array = (new BigDecimal("0")).divideAndRemainder(new BigDecimal("0E+8"), new MathContext("precision=1 roundingMode=HALF_UP"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0630()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext(-1);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0631()
  {
    rc_long = (new BigDecimal("0E+8")).longValueExact();
    Assert.assertEquals(0L, rc_long);
  }
  public void testItem_0632()
  {
    rc_BigDecimal = (new BigDecimal("0E+8")).min(new BigDecimal("0E+8"));
    Assert.assertEquals("0E+8", rc_BigDecimal.toString());
  }
  public void testItem_0633()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal_array = (new BigDecimal("0E+8")).divideAndRemainder(new BigDecimal("0.000"), new MathContext("precision=0 roundingMode=HALF_UP"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0634()
  {
    rc_int = (new BigDecimal("0E+8")).scale();
    Assert.assertEquals(-8, rc_int);
  }
  public void testItem_0635()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\0', '8', '\1', '\uFFFF', '\234', '\0', '8', '\234', '\0', '\0', '8', '8', '\234', '\0', '8', '\uFFFF', '\uFFFF', '8', '8', '\234', '\1', '\uFFFF', '8', '\1', '8', '\234', '\uFFFF', '\uFFFF', '\234', '\1', '\uFFFF', '\uFFFF', '\234', '\uFFFF', '\0', '\234', '\0', '8', '\0', '8', '8', '\1', '8', '8', '\0', '\234', '\0', '\0', '\1', '\1', '8', '\1', '\234', '8', '8', '\0', '\0', '\1', '\234', '8', '\1', '\0', '\234', '\uFFFF', '8', '\0', '8', '\uFFFF', '\0', '\234', '\234', '\234', '\0', '\uFFFF', '\0', '\0', '\uFFFF', '\0', '\234', '\0', '8', '\234', '\uFFFF', '\uFFFF', '\0', '8', '8', '\0', '\uFFFF', '\1', '\uFFFF', '\1', '\1', '\234', '\1', '\uFFFF', '8', '\234', '\0', '\uFFFF'}, 1, -1);
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0636()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("-0.001")).scaleByPowerOfTen(-2147483648);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0637()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("0.000")).divide(new BigDecimal("-0.001"), -2147483648);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0638()
  {
    rc_BigDecimal = (new BigDecimal("0.000")).abs();
    Assert.assertEquals("0.000", rc_BigDecimal.toString());
  }
  public void testItem_0639()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0640()
  {
    rc_BigDecimal = (new BigDecimal("-0.001")).min(new BigDecimal("0E+8"));
    Assert.assertEquals("-0.001", rc_BigDecimal.toString());
  }
  public void testItem_0641()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext(-2147483648);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0642()
  {
    rc_BigDecimal = (new BigDecimal("0E+8")).min(new BigDecimal("-0.001"));
    Assert.assertEquals("-0.001", rc_BigDecimal.toString());
  }
  public void testItem_0643()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("", new MathContext("precision=0 roundingMode=HALF_UP"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0644()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext("IEOFLUMYQ;?FRR>E;X;WY@4;4C7H@FV>?0BMMYFX9A602:9GNR;VILK=OV91LW7@7?HK5AA4V93RNJ49DT2Q=I6@R:?TB0ISRAMF");
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0645()
  {
    rc_BigDecimal = (new BigDecimal("-0.001")).round(new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("-0.001", rc_BigDecimal.toString());
  }
  public void testItem_0646()
  {
    rc_MathContext = new MathContext(2147483647);
    Assert.assertEquals("precision=2147483647 roundingMode=HALF_UP", rc_MathContext.toString());
  }
  public void testItem_0647()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("32")).movePointRight(-2147483648);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0648()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext("<GJM0Q1G75>DX:FA>5I79HR3VFKCSYUPKF5X;:E;>B118VN3<5LI:SOT<BIC");
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0649()
  {
    rc_BigDecimal = (new BigDecimal("0E+8")).setScale(2147483647, java.math.RoundingMode.UNNECESSARY);
    Assert.assertEquals("0E-2147483647", rc_BigDecimal.toString());
  }
  public void testItem_0650()
  {
    rc_BigDecimal = new BigDecimal(-2147483648, new MathContext("precision=2147483647 roundingMode=FLOOR"));
    Assert.assertEquals("-2147483648", rc_BigDecimal.toString());
  }
//  public void testItem_0651()
//  {
//    boolean caught;
//    if (!Boolean.getBoolean("notanerror"))
//    {
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("-0.001")).multiply(new BigDecimal("0E-2147483647"));
//    }
//    catch (java.lang.ArithmeticException e) {
//      caught = true;
//    }
//    Assert.assertEquals("85.57046979865771%", true, caught);
//    }
//  }
  public void testItem_0652()
  {
    rc_BigInteger = (new BigDecimal("-0.001")).unscaledValue();
    Assert.assertEquals("-1", rc_BigInteger.toString());
  }
  public void testItem_0653()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0654()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\1', '\1', '8', '\uFFFF', '8', '\1', '\uFFFF', '8', '\1', '\0', '8', '\1', '\1', '\0', '\1', '8', '\0', '8', '\1', '\234', '\1', '8', '8', '\234', '8', '\1', '\234', '\234', '\234', '\uFFFF', '\0', '\234', '\uFFFF', '\234', '\234', '\uFFFF', '\234', '\uFFFF', '\0', '8', '\1', '\0', '\uFFFF', '\0', '\1', '\1', '\0', '\234', '\1', '8', '\uFFFF', '\uFFFF', '8', '\1', '\uFFFF', '\uFFFF', '\1', '\234', '\234', '\0', '\234', '\0', '\234', '\1', '\0', '\234', '8', '\234', '\234', '\1', '\234', '\234', '8', '\uFFFF', '\0', '\uFFFF', '\0', '\234', '\234', '\uFFFF', '\1', '\1', '\uFFFF', '\0', '\0', '\1', '\uFFFF', '\1', '\1', '\234', '\234', '\234', '\0', '\1', '\uFFFF', '8', '8', '8', '\0', '8'});
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0655()
  {
    rc_int = (new BigDecimal("32")).signum();
    Assert.assertEquals(1, rc_int);
  }
  public void testItem_0656()
  {
    rc_int = (new BigDecimal("32")).compareTo(new BigDecimal("32"));
    Assert.assertEquals(0, rc_int);
  }
  public void testItem_0657()
  {
    rc_BigInteger = (new BigDecimal("32")).toBigIntegerExact();
    Assert.assertEquals("32", rc_BigInteger.toString());
  }
  public void testItem_0658()
  {
    rc_BigDecimal = new BigDecimal(2147483647, new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("2E+9", rc_BigDecimal.toString());
  }
  public void testItem_0659()
  {
    rc_BigDecimal = (new BigDecimal("2E+9")).negate();
    Assert.assertEquals("-2E+9", rc_BigDecimal.toString());
  }
  public void testItem_0660()
  {
    rc_BigDecimal = (new BigDecimal("2E+9")).divide(new BigDecimal("-0.001"));
    Assert.assertEquals("-2E+12", rc_BigDecimal.toString());
  }
  public void testItem_0661()
  {
    rc_BigDecimal = (new BigDecimal("-2E+9")).multiply(new BigDecimal("-2E+12"), new MathContext("precision=2147483647 roundingMode=HALF_UP"));
    Assert.assertEquals("4E+21", rc_BigDecimal.toString());
  }
  public void testItem_0662()
  {
    rc_BigDecimal_array = (new BigDecimal("-2E+12")).divideAndRemainder(new BigDecimal("2E+9"));
  }
  public void testItem_0663()
  {
    rc_int = (new BigDecimal("32")).scale();
    Assert.assertEquals(0, rc_int);
  }
//  public void testItem_0664()
//  {
//    boolean caught;
//    rc_int = (new BigDecimal("-2E+12")).hashCode();
//    Assert.assertEquals(-74, rc_int);
//  }
  public void testItem_0665()
  {
    rc_BigDecimal = (new BigDecimal("32")).abs();
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0666()
  {
    rc_int = (new BigDecimal("-2E+9")).scale();
    Assert.assertEquals(-9, rc_int);
  }
  public void testItem_0667()
  {
    rc_int = (new BigDecimal("32")).intValue();
    Assert.assertEquals(32, rc_int);
  }
  public void testItem_0668()
  {
    rc_int = (new BigDecimal("2E+9")).precision();
    Assert.assertEquals(1, rc_int);
  }
  public void testItem_0669()
  {
    rc_BigDecimal = (new BigDecimal("4E+21")).divide(new BigDecimal("4E+21"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0670()
  {
    rc_BigInteger = (new BigDecimal("-2E+9")).toBigIntegerExact();
    Assert.assertEquals("-2000000000", rc_BigInteger.toString());
  }
  public void testItem_0671()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("1")).divide(new BigDecimal("32"), -2147483648);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0672()
  {
    rc_BigDecimal = (new BigDecimal("-2E+12")).plus(new MathContext("precision=2147483647 roundingMode=HALF_UP"));
    Assert.assertEquals("-2E+12", rc_BigDecimal.toString());
  }
  public void testItem_0673()
  {
    rc_BigDecimal = (new BigDecimal("32")).divideToIntegralValue(new BigDecimal("-2E+12"));
    Assert.assertEquals("0E-12", rc_BigDecimal.toString());
  }
  public void testItem_0674()
  {
    rc_BigDecimal = (new BigDecimal("-2E+12")).divide(new BigDecimal("-2E+9"), -1, java.math.RoundingMode.DOWN);
    Assert.assertEquals("1.00E+3", rc_BigDecimal.toString());
  }
  public void testItem_0675()
  {
    rc_BigDecimal = (new BigDecimal("32")).divide(new BigDecimal("1"), java.math.RoundingMode.CEILING);
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0676()
  {
    rc_BigDecimal = (new BigDecimal("1.00E+3")).scaleByPowerOfTen(0);
    Assert.assertEquals("1.00E+3", rc_BigDecimal.toString());
  }
  public void testItem_0677()
  {
    rc_BigDecimal = (new BigDecimal("32")).remainder(new BigDecimal("1.00E+3"), new MathContext("precision=2147483647 roundingMode=FLOOR"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0678()
  {
    rc_BigDecimal = (new BigDecimal("1.00E+3")).negate(new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("-1E+3", rc_BigDecimal.toString());
  }
  public void testItem_0679()
  {
    rc_BigDecimal = (new BigDecimal("1.00E+3")).add(new BigDecimal("-1E+3"));
    Assert.assertEquals("0E+1", rc_BigDecimal.toString());
  }
  public void testItem_0680()
  {
    rc_BigDecimal = (new BigDecimal("-2E+12")).subtract(new BigDecimal("-2E+12"));
    Assert.assertEquals("0E+12", rc_BigDecimal.toString());
  }
  public void testItem_0681()
  {
    rc_BigDecimal = (new BigDecimal("0E+1")).add(new BigDecimal("0E+1"), new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("0E+1", rc_BigDecimal.toString());
  }
  public void testItem_0682()
  {
    rc_BigDecimal = (new BigDecimal("-1E+3")).movePointLeft(1);
    Assert.assertEquals("-100", rc_BigDecimal.toString());
  }
  public void testItem_0683()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext("8QG5U2I7@N<85?X=63PWAX62P3KIYF2EM3KV2?LVXRUBUWE<E2OR");
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0684()
  {
    rc_MathContext = new MathContext(2147483647, java.math.RoundingMode.HALF_DOWN);
    Assert.assertEquals("precision=2147483647 roundingMode=HALF_DOWN", rc_MathContext.toString());
  }
  public void testItem_0685()
  {
    rc_BigDecimal = new BigDecimal(1L, new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0686()
  {
    rc_BigDecimal = (new BigDecimal("-1E+3")).negate();
    Assert.assertEquals("1E+3", rc_BigDecimal.toString());
  }
  public void testItem_0687()
  {
    rc_BigDecimal = (new BigDecimal("1")).divide(new BigDecimal("-2E+12"), 0);
    Assert.assertEquals("-1", rc_BigDecimal.toString());
  }
  public void testItem_0688()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\0', '\234', '\234', '\0', '\234', '8', '\1', '\234', '\234', '\234', '\1', '\0', '\uFFFF', '\0', '\1', '8', '\uFFFF', '\234', '\1', '\0', '\1', '8', '\uFFFF', '\0', '8', '\0', '\uFFFF', '\0', '8', '\234', '\uFFFF', '\1', '\234', '8', '\uFFFF', '\uFFFF', '\1', '\1', '\0', '8', '8', '\1', '\234', '\234', '\234', '\0', '\1', '\0', '\234', '\0'}, new MathContext("precision=2147483647 roundingMode=HALF_UP"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0689()
  {
    rc_BigDecimal = (new BigDecimal("0E+1")).plus(new MathContext("precision=2147483647 roundingMode=HALF_UP"));
    Assert.assertEquals("0E+1", rc_BigDecimal.toString());
  }
  public void testItem_0690()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\0', '\234', '\1', '\234', '\uFFFF', '8', '\0', '\1', '8', '\0', '\uFFFF', '\0', '\234', '\uFFFF', '8', '\0', '\234', '\0', '8', '\234', '\234', '\234', '8', '8', '\uFFFF', '\1'}, -2147483648, -1);
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
//  public void testItem_0691()
//  {
//    boolean caught;
//    rc_int = (new BigDecimal("1")).hashCode();
//    Assert.assertEquals(31, rc_int);
//  }
  public void testItem_0692()
  {
    rc_BigDecimal = (new BigDecimal("-2E+12")).divide(new BigDecimal("-100"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("2E+10", rc_BigDecimal.toString());
  }
  public void testItem_0693()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("1")).divide(new BigDecimal("0E+1"), java.math.RoundingMode.UNNECESSARY);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0694()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\uFFFF'}, 2147483647, 1);
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0695()
  {
    rc_BigDecimal = (new BigDecimal("-2E+12")).negate(new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("2E+12", rc_BigDecimal.toString());
  }
  public void testItem_0696()
  {
    rc_BigDecimal = (new BigDecimal("1")).multiply(new BigDecimal("1E+3"), new MathContext("precision=1 roundingMode=DOWN"));
    Assert.assertEquals("1E+3", rc_BigDecimal.toString());
  }
  public void testItem_0697()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("2E+12")).divide(new BigDecimal("2E+12"), 2147483647);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
//  public void testItem_0698()
//  {
//    boolean caught;
//    if (!Boolean.getBoolean("notanerror"))
//    {
//    caught = false;
//    try {
//      rc_BigDecimal_array = (new BigDecimal("2E+12")).divideAndRemainder(new BigDecimal("2E+12"), new MathContext("precision=2147483647 roundingMode=HALF_UP"));
//    }
//    catch (java.lang.ArithmeticException e) {
//      caught = true;
//    }
//    Assert.assertEquals("85.57046979865771%", true, caught);
//    }
//  }
  public void testItem_0699()
  {
    rc_String = (new BigDecimal("-100")).toEngineeringString();
    Assert.assertEquals("-100", rc_String);
  }
  public void testItem_0700()
  {
    rc_BigDecimal = (new BigDecimal("-100")).divide(new BigDecimal("2E+12"), java.math.RoundingMode.DOWN);
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0701()
  {
    rc_BigDecimal = new BigDecimal(4.9E-324);
    Assert.assertEquals("4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625E-324", rc_BigDecimal.toString());
  }
  public void testItem_0702()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\1'}, -1, -1, new MathContext("precision=1 roundingMode=DOWN"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
//  public void testItem_0703()
//  {
//    boolean caught;
//    if (!Boolean.getBoolean("notanerror"))
//    {
//    rc_BigDecimal = (new BigDecimal("-100")).divideToIntegralValue(new BigDecimal("1"), new MathContext("precision=1 roundingMode=DOWN"));
//    Assert.assertEquals("-1E+2", rc_BigDecimal.toString());
//    }
//  }
  public void testItem_0704()
  {
    rc_BigDecimal = (new BigDecimal("-100")).multiply(new BigDecimal("1"), new MathContext("precision=2147483647 roundingMode=HALF_UP"));
    Assert.assertEquals("-100", rc_BigDecimal.toString());
  }
//  public void testItem_0705()
//  {
//    boolean caught;
//    if (!Boolean.getBoolean("notanerror"))
//    {
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("1E+3")).divideToIntegralValue(new BigDecimal("1E+3"), new MathContext("precision=2147483647 roundingMode=HALF_UP"));
//    }
//    catch (java.lang.ArithmeticException e) {
//      caught = true;
//    }
//    Assert.assertEquals("85.57046979865771%", true, caught);
//    }
//  }
  public void testItem_0706()
  {
    rc_int = (new BigDecimal("0E+1")).compareTo(new BigDecimal("1"));
    Assert.assertEquals(-1, rc_int);
  }
  public void testItem_0707()
  {
    rc_BigDecimal = new BigDecimal(-1L, new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("-1", rc_BigDecimal.toString());
  }
  public void testItem_0708()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("-1")).pow(2147483647, new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0709()
  {
    rc_BigInteger = (new BigDecimal("0E+1")).toBigIntegerExact();
    Assert.assertEquals("0", rc_BigInteger.toString());
  }
  public void testItem_0710()
  {
    rc_BigDecimal = (new BigDecimal("-100")).negate();
    Assert.assertEquals("100", rc_BigDecimal.toString());
  }
  public void testItem_0711()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("C1A1IT?KFABMW==7?3PPY>D2Q71=<PCC01=;2X?=5BVVA3:RMT31F;T@S?X6JH?T4L9WFH7OL?KN@E4IXTB7TPV6JRP@A5KR=KBI");
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0712()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext(-1, java.math.RoundingMode.CEILING);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0713()
  {
    rc_double = (new BigDecimal("1")).doubleValue();
    Assert.assertEquals(1.0, rc_double, 0);
  }
  public void testItem_0714()
  {
    rc_BigDecimal = (new BigDecimal("1")).setScale(1);
    Assert.assertEquals("1.0", rc_BigDecimal.toString());
  }
  public void testItem_0715()
  {
    rc_BigDecimal = (new BigDecimal("-1")).divideToIntegralValue(new BigDecimal("-1"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0716()
  {
    rc_int = (new BigDecimal("-100")).scale();
    Assert.assertEquals(0, rc_int);
  }
  public void testItem_0717()
  {
    rc_BigDecimal = new BigDecimal(2147483647);
    Assert.assertEquals("2147483647", rc_BigDecimal.toString());
  }
  public void testItem_0718()
  {
    rc_BigDecimal = (new BigDecimal("1")).add(new BigDecimal("-100"));
    Assert.assertEquals("-99", rc_BigDecimal.toString());
  }
  public void testItem_0719()
  {
    rc_BigDecimal = (new BigDecimal("-100")).subtract(new BigDecimal("-99"), new MathContext("precision=1 roundingMode=DOWN"));
    Assert.assertEquals("-1", rc_BigDecimal.toString());
  }
  public void testItem_0720()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\uFFFF', '\1', '\0', '\0', '\234', '\uFFFF', '\234', '\uFFFF', '8', '\0'}, 0, -2147483648, new MathContext("precision=1 roundingMode=HALF_UP"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0721()
  {
    rc_BigDecimal = (new BigDecimal("-99")).min(new BigDecimal("2147483647"));
    Assert.assertEquals("-99", rc_BigDecimal.toString());
  }
  public void testItem_0722()
  {
    rc_BigDecimal = (new BigDecimal("2147483647")).scaleByPowerOfTen(0);
    Assert.assertEquals("2147483647", rc_BigDecimal.toString());
  }
  public void testItem_0723()
  {
    rc_int = (new BigDecimal("2147483647")).precision();
    Assert.assertEquals(10, rc_int);
  }
  public void testItem_0724()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("2147483647")).divide(new BigDecimal("-99"), -2147483648, 0);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0725()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\1', '\uFFFF', '\234', '\234', '\1', '\0', '\uFFFF', '\0', '\0', '\1', '8', '\234', '\0', '8', '\234', '\0', '\uFFFF', '\234', '8', '\0', '\uFFFF', '\1', '\1', '8', '\0', '\1', '\uFFFF', '\234', '\1', '\0', '\uFFFF', '8', '\1', '\0', '\1', '\0', '8', '\1', '\uFFFF', '\uFFFF', '\1', '8', '\0', '8', '\1', '\1', '\1', '\234', '8', '\0', '\uFFFF', '\1', '8', '\uFFFF', '\uFFFF', '\1', '8', '8', '\1', '\uFFFF', '8', '\1', '8', '\uFFFF', '\234', '\0', '\1', '\234', '\uFFFF', '\0', '\1', '8', '\1', '\234', '\234', '\uFFFF', '\uFFFF', '\234', '8', '\0', '\0', '\234', '\0', '8', '\0', '\1', '\uFFFF', '\uFFFF', '8', '8', '8', '\1', '\1', '\0', '8', '\0', '\1', '\234', '\uFFFF', '\1'});
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0726()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext("D3C?9QU0PS8J4P79BC=UV=G<DH7J7QD7@=CEGFOES>NF@3MWE6CUI;R@4K4NK40GS2X3D68@W5YPV1HISL");
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0727()
  {
    rc_BigDecimal = new BigDecimal(0L, new MathContext("precision=2147483647 roundingMode=HALF_UP"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0728()
  {
    rc_float = (new BigDecimal("2147483647")).floatValue();
    Assert.assertEquals(2.147483648E9F, rc_float, 0);
  }
  @SuppressWarnings("unlikely-arg-type")
  public void testItem_0729()
  {
    rc_boolean = (new BigDecimal("2147483647")).equals("");
    Assert.assertEquals(false, rc_boolean);
  }
  public void testItem_0730()
  {
    rc_BigDecimal = (new BigDecimal("2147483647")).add(new BigDecimal("0"), new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("2147483647", rc_BigDecimal.toString());
  }
  public void testItem_0731()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("2147483647")).movePointRight(-2147483648);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0732()
  {
    rc_BigDecimal = (new BigDecimal("-99")).negate(new MathContext("precision=1 roundingMode=DOWN"));
    Assert.assertEquals("9E+1", rc_BigDecimal.toString());
  }
//  public void testItem_0733()
//  {
//    boolean caught;
//    rc_int = (new BigDecimal("2147483647")).hashCode();
//    Assert.assertEquals(2147483617, rc_int);
//  }
  public void testItem_0734()
  {
    rc_BigInteger = (new BigDecimal("2147483647")).toBigIntegerExact();
    Assert.assertEquals("2147483647", rc_BigInteger.toString());
  }
  public void testItem_0735()
  {
    rc_BigDecimal = (new BigDecimal("-100")).setScale(-1);
    Assert.assertEquals("-1.0E+2", rc_BigDecimal.toString());
  }
  public void testItem_0736()
  {
    rc_BigDecimal = new BigDecimal(4.9E-324);
    Assert.assertEquals("4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625E-324", rc_BigDecimal.toString());
  }
  public void testItem_0737()
  {
    rc_BigDecimal = (new BigDecimal("2147483647")).round(new MathContext("precision=1 roundingMode=DOWN"));
    Assert.assertEquals("2E+9", rc_BigDecimal.toString());
  }
  public void testItem_0738()
  {
    rc_long = (new BigDecimal("-99")).longValueExact();
    Assert.assertEquals(-99L, rc_long);
  }
  public void testItem_0739()
  {
    rc_int = (new BigDecimal("2147483647")).precision();
    Assert.assertEquals(10, rc_int);
  }
  public void testItem_0740()
  {
    rc_BigDecimal = (new BigDecimal("-99")).add(new BigDecimal("4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625E-324"));
    Assert.assertEquals("-98.999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999995059343541587534558234312071317786276349401973856752355744143174993244927297912481347001636383640076202034353045542822690733432896440602036012252039892181218736992868096885954721541828321510178963112813639430012692769499936125908464350156126875266027268303848599682846146019258737614344088289733414433132318129604396893750680547284085075446706945434555988725198702900004580680105909195834366754752428521309852732198406447613884498651964735065279806209731892892508296667773155246664279167568063907617106541631939893988493830190246921657722681670752095017475269223624072752125343915221796265530300466352982027322282414874339448800868495108898548962137261832749044162610266401006335190058835794297362909720757232455434770912461317493580281734466552734375", rc_BigDecimal.toString());
  }
  public void testItem_0741()
  {
    rc_BigDecimal = (new BigDecimal("2E+9")).ulp();
    Assert.assertEquals("1E+9", rc_BigDecimal.toString());
  }
  public void testItem_0742()
  {
    rc_BigDecimal = new BigDecimal(-1L, new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("-1", rc_BigDecimal.toString());
  }
  public void testItem_0743()
  {
    rc_BigDecimal = (new BigDecimal("4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625E-324")).divide(new BigDecimal("-1"), new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("-4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625E-324", rc_BigDecimal.toString());
  }
  public void testItem_0744()
  {
    rc_int = (new BigDecimal("-1")).precision();
    Assert.assertEquals(1, rc_int);
  }
  public void testItem_0745()
  {
    rc_BigDecimal = (new BigDecimal("-4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625E-324")).add(new BigDecimal("2147483647"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("2E+9", rc_BigDecimal.toString());
  }
  public void testItem_0746()
  {
    rc_BigDecimal = new BigDecimal(1.7976931348623157E308);
    Assert.assertEquals("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368", rc_BigDecimal.toString());
  }
  public void testItem_0747()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("AUVV:U2J8?UUFGC71;FSFTT", new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0748()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0749()
  {
    rc_BigDecimal = (new BigDecimal("1E+9")).plus();
    Assert.assertEquals("1E+9", rc_BigDecimal.toString());
  }
  public void testItem_0750()
  {
    rc_BigDecimal = new BigDecimal(-1);
    Assert.assertEquals("-1", rc_BigDecimal.toString());
  }
  public void testItem_0751()
  {
    rc_BigInteger = (new BigDecimal("-1")).unscaledValue();
    Assert.assertEquals("-1", rc_BigInteger.toString());
  }
  public void testItem_0752()
  {
    rc_BigDecimal_array = (new BigDecimal("-1")).divideAndRemainder(new BigDecimal("32"), new MathContext("precision=0 roundingMode=HALF_UP"));
  }
  public void testItem_0753()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("-1")).setScale(0, -2147483648);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0754()
  {
    rc_BigDecimal = (new BigDecimal("32")).round(new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0755()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\uFFFF'}, new MathContext("precision=0 roundingMode=HALF_UP"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0756()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("-1")).divide(new BigDecimal("-1"), -2147483648, java.math.RoundingMode.DOWN);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0757()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), -2147483648);
    Assert.assertEquals("3.2E+2147483649", rc_BigDecimal.toString());
  }
  public void testItem_0758()
  {
    rc_BigInteger = (new BigDecimal("32")).toBigIntegerExact();
    Assert.assertEquals("32", rc_BigInteger.toString());
  }
  public void testItem_0759()
  {
    rc_BigDecimal = (new BigDecimal("-1")).subtract(new BigDecimal("-1"), new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0760()
  {
    rc_BigDecimal = new BigDecimal(9223372036854775807L, new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
    Assert.assertEquals("9223372036854775807", rc_BigDecimal.toString());
  }
//  public void testItem_0761()
//  {
//    boolean caught;
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("320.0E+2147483647")).subtract(new BigDecimal("-1"));
//    }
//    catch (java.lang.ArithmeticException e) {
//      caught = true;
//    }
//    Assert.assertEquals("85.57046979865771%", true, caught);
//  }
  public void testItem_0762()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\0', '\234', '\0', '\0', '8', '\0', '\uFFFF', '\234', '\1', '\1', '\234', '\uFFFF', '\uFFFF', '\234', '\1', '\1', '\uFFFF', '\1', '\0', '\234', '\234', '\1', '\234', '8', '\234', '\234', '\0', '\234', '\234', '\0', '\uFFFF', '\234', '8', '\1', '\uFFFF', '\234', '\1', '\1', '\234', '\0', '\uFFFF', '\0', '8', '\234', '\1', '\234', '\uFFFF', '\uFFFF', '8', '\0', '8', '8', '8', '\1', '\1', '\uFFFF', '\234', '\1', '\1', '\uFFFF', '\234', '\0', '8', '\0', '\0', '\1', '\uFFFF', '\234', '\0', '\1', '8', '\0', '\0', '\uFFFF', '\1', '8', '\uFFFF', '\0', '\0', '\uFFFF', '8', '\0', '\uFFFF', '\1', '\1', '\0', '\uFFFF', '8', '\uFFFF', '\uFFFF', '\0', '\uFFFF', '\1', '\1', '\uFFFF', '\234', '\0', '\0', '\234', '8'}, new MathContext("precision=1 roundingMode=HALF_UP"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0763()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), 1);
    Assert.assertEquals("3.2", rc_BigDecimal.toString());
  }
  public void testItem_0764()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("-1")).pow(1, new MathContext("precision=2147483647 roundingMode=HALF_UP"));
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("85.57046979865771%", true, caught);
  }
  public void testItem_0765()
  {
    rc_long = (new BigDecimal("9223372036854775807")).longValueExact();
    Assert.assertEquals(9223372036854775807L, rc_long);
  }
  public void testItem_0766()
  {
    rc_float = (new BigDecimal("-1")).floatValue();
    Assert.assertEquals(-1.0F, rc_float, 0);
  }
  public void testItem_0767()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("<55HBGBC@27XX84KH>:XOJTNGQS7DNRQU81IS38=F3M;XX>BJOQ?WNCMRIP=DW5FW7>D7AAISWS=QF2I7XV5<MU@3VW9;9EHJS;U");
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0768()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("2E+9")).divide(new BigDecimal("320.0E+2147483647"), -2147483648, -1);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0769()
  {
    rc_BigDecimal = (new BigDecimal("-1")).negate(new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
//  public void testItem_0770()
//  {
//    boolean caught;
//    if (!Boolean.getBoolean("notanerror"))
//    {
//    rc_BigDecimal = (new BigDecimal("320.0E+2147483647")).max(new BigDecimal("2E+9"));
//    Assert.assertEquals("2E+9", rc_BigDecimal.toString());
//    }
//  }
  public void testItem_0771()
  {
    rc_BigDecimal = new BigDecimal(-9223372036854775808L);
    Assert.assertEquals("-9223372036854775808", rc_BigDecimal.toString());
  }
  public void testItem_0772()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("3E+1", rc_BigDecimal.toString());
  }
  public void testItem_0773()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("D0L;5QD@I3M0;IIL>779JB:SWB88CGGNY;Y0;;<F2>2SRB2=SFEQTI>?P:2F?YQR?JF<5?KEFQJDFO");
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0774()
  {
    rc_BigInteger = (new BigDecimal("-1")).toBigIntegerExact();
    Assert.assertEquals("-1", rc_BigInteger.toString());
  }
//  public void testItem_0775()
//  {
//    boolean caught;
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("2E+9")).remainder(new BigDecimal("-1"), new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
//    }
//    catch (java.lang.OutOfMemoryError e) {
//      caught = true;
//    }
//    Assert.assertEquals("86.24161073825503%", true, caught);
//  }
  public void testItem_0776()
  {
    rc_BigDecimal = (new BigDecimal("2E+9")).setScale(1, java.math.RoundingMode.DOWN);
    Assert.assertEquals("2000000000.0", rc_BigDecimal.toString());
  }
//  public void testItem_0777()
//  {
//    boolean caught;
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("320.0E+2147483647")).subtract(new BigDecimal("-1"));
//    }
//    catch (java.lang.ArithmeticException e) {
//      caught = true;
//    }
//    Assert.assertEquals("86.24161073825503%", true, caught);
//  }
  public void testItem_0778()
  {
    rc_BigDecimal = (new BigDecimal("2E+9")).divide(new BigDecimal("2E+9"), java.math.RoundingMode.HALF_EVEN);
    Assert.assertEquals("0E+9", rc_BigDecimal.toString());
  }
//  public void testItem_0779()
//  {
//    boolean caught;
//    rc_int = (new BigDecimal("2000000000.0")).hashCode();
//    Assert.assertEquals(1524713221, rc_int);
//  }
  public void testItem_0780()
  {
    rc_BigDecimal = new BigDecimal(1.0, new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0781()
  {
    rc_BigDecimal = (new BigDecimal("2000000000.0")).max(new BigDecimal("1"));
    Assert.assertEquals("2000000000.0", rc_BigDecimal.toString());
  }
  public void testItem_0782()
  {
    boolean caught;
    caught = false;
    try {
      rc_byte = (new BigDecimal("2000000000.0")).byteValueExact();
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0783()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("5XMPWC");
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0784()
  {
    rc_BigDecimal = (new BigDecimal("0E+9")).divide(new BigDecimal("3E+1"));
    Assert.assertEquals("0E+8", rc_BigDecimal.toString());
  }
  public void testItem_0785()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("0E+9")).remainder(new BigDecimal("0E+9"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0786()
  {
    rc_int = (new BigDecimal("1")).scale();
    Assert.assertEquals(0, rc_int);
  }
  public void testItem_0787()
  {
    rc_int = (new BigDecimal("-1")).intValueExact();
    Assert.assertEquals(-1, rc_int);
  }
  public void testItem_0788()
  {
    rc_int = (new BigDecimal("3E+1")).scale();
    Assert.assertEquals(-1, rc_int);
  }
  public void testItem_0789()
  {
    rc_BigInteger = (new BigDecimal("0E+9")).toBigIntegerExact();
    Assert.assertEquals("0", rc_BigInteger.toString());
  }
  public void testItem_0790()
  {
    rc_BigDecimal = (new BigDecimal("0E+9")).multiply(new BigDecimal("3E+1"), new MathContext("precision=1 roundingMode=DOWN"));
    Assert.assertEquals("0E+10", rc_BigDecimal.toString());
  }
  public void testItem_0791()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("3E+1")).divide(new BigDecimal("1"), -2147483648, 2147483647);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0792()
  {
    rc_BigDecimal = new BigDecimal(0L);
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0793()
  {
    rc_BigDecimal = (new BigDecimal("-1")).plus(new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
    Assert.assertEquals("-1", rc_BigDecimal.toString());
  }
  public void testItem_0794()
  {
    rc_BigDecimal = (new BigDecimal("1")).divideToIntegralValue(new BigDecimal("1"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0795()
  {
    rc_BigDecimal = new BigDecimal(1135879015891L);
    Assert.assertEquals("1135879015891", rc_BigDecimal.toString());
  }
//  public void testItem_0796()
//  {
//    boolean caught;
//    if (!Boolean.getBoolean("notanerror"))
//    {
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("1")).setScale(-2147483648, java.math.RoundingMode.FLOOR);
//    }
//    catch (java.lang.ArithmeticException e) {
//      caught = true;
//    }
//    Assert.assertEquals("86.24161073825503%", true, caught);
//    }
//  }
  @SuppressWarnings("unlikely-arg-type")
  public void testItem_0797()
  {
    rc_boolean = (new BigDecimal("-1")).equals("");
    Assert.assertEquals(false, rc_boolean);
  }
  @SuppressWarnings("unlikely-arg-type")
  public void testItem_0798()
  {
    rc_boolean = (new BigDecimal("-1")).equals("");
    Assert.assertEquals(false, rc_boolean);
  }
  public void testItem_0799()
  {
    rc_BigDecimal = (new BigDecimal("3E+1")).subtract(new BigDecimal("1135879015891"));
    Assert.assertEquals("-1135879015861", rc_BigDecimal.toString());
  }
  public void testItem_0800()
  {
    boolean caught;
    caught = false;
    try {
      rc_int = (new BigDecimal("1135879015891")).intValueExact();
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0801()
  {
    rc_BigDecimal = (new BigDecimal("1135879015891")).pow(0, new MathContext("precision=1 roundingMode=DOWN"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0802()
  {
    rc_BigDecimal = (new BigDecimal("0E+9")).abs(new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("0E+9", rc_BigDecimal.toString());
  }
  public void testItem_0803()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), -2147483648, new MathContext("precision=2147483647 roundingMode=HALF_UP"));
    Assert.assertEquals("3.2E+2147483649", rc_BigDecimal.toString());
  }
  public void testItem_0804()
  {
    rc_BigDecimal = (new BigDecimal("1")).divide(new BigDecimal("1"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0805()
  {
    rc_BigInteger = (new BigDecimal("0E+9")).toBigInteger();
    Assert.assertEquals("0", rc_BigInteger.toString());
  }
  public void testItem_0806()
  {
    rc_BigDecimal = (new BigDecimal("320.0E+2147483647")).divide(new BigDecimal("320.0E+2147483647"), 0, java.math.RoundingMode.DOWN);
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  @SuppressWarnings("unlikely-arg-type")
  public void testItem_0807()
  {
    rc_boolean = (new BigDecimal("0E+9")).equals("Q:6HU8QHMLENF;MINOOMLE80BTWD:L2T934HADEA?=I0:7LKC4QSRWNCFNW;MIU<5UWUJ?>:");
    Assert.assertEquals(false, rc_boolean);
  }
  public void testItem_0808()
  {
    rc_BigInteger = (new BigDecimal("1")).toBigIntegerExact();
    Assert.assertEquals("1", rc_BigInteger.toString());
  }
  public void testItem_0809()
  {
    rc_BigDecimal = (new BigDecimal("1")).divideToIntegralValue(new BigDecimal("1"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0810()
  {
    rc_BigDecimal = (new BigDecimal("1")).round(new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0811()
  {
    rc_BigDecimal = (new BigDecimal("1")).ulp();
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0812()
  {
    rc_BigDecimal = (new BigDecimal("1")).multiply(new BigDecimal("1"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0813()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("1")).pow(-1);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0814()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext("");
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0815()
  {
    rc_float = (new BigDecimal("0E+9")).floatValue();
    Assert.assertEquals(0.0F, rc_float, 0);
  }
  public void testItem_0816()
  {
    rc_BigInteger = (new BigDecimal("1")).toBigInteger();
    Assert.assertEquals("1", rc_BigInteger.toString());
  }
  public void testItem_0817()
  {
    rc_BigInteger = (new BigDecimal("1")).toBigIntegerExact();
    Assert.assertEquals("1", rc_BigInteger.toString());
  }
  @SuppressWarnings("unlikely-arg-type")
  public void testItem_0818()
  {
    rc_boolean = (new BigDecimal("0E+9")).equals("6BW<11==4<O0:90GPRWS5D6=Y09GV7VKV4CSD;3XP4=H54LLBY0YD>4:NHDI9Y6W3YL3PXE<DLR@=6<I<RV@8UWM=79?50XJS8?E");
    Assert.assertEquals(false, rc_boolean);
  }
  public void testItem_0819()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("1")).divide(new BigDecimal("1"), -1);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0820()
  {
    rc_BigDecimal = (new BigDecimal("1")).divide(new BigDecimal("1"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0821()
  {
    rc_BigDecimal = (new BigDecimal("0E+9")).abs();
    Assert.assertEquals("0E+9", rc_BigDecimal.toString());
  }
  public void testItem_0822()
  {
    rc_BigDecimal = (new BigDecimal("1")).movePointLeft(2147483647);
    Assert.assertEquals("1E-2147483647", rc_BigDecimal.toString());
  }
  public void testItem_0823()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("1")).divideToIntegralValue(new BigDecimal("0E+9"), new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0824()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(";0P5C49VMJREOS?B?B1AUF84EY3UAEW;>O@=0<V>0XK;K;>AEVWTFAO<3=IYDD7WMB3L62INL<Q6:VTO3KDN0U?B:;9<X6@;:?UI", new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0825()
  {
    rc_BigDecimal = (new BigDecimal("1")).negate(new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("-1", rc_BigDecimal.toString());
  }
  public void testItem_0826()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0827()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("1")).pow(-1, new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0828()
  {
    rc_BigInteger = (new BigDecimal("1")).unscaledValue();
    Assert.assertEquals("1", rc_BigInteger.toString());
  }
  public void testItem_0829()
  {
    rc_BigDecimal = new BigDecimal(1L, new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0830()
  {
    rc_BigDecimal = (new BigDecimal("0E+9")).add(new BigDecimal("32"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0831()
  {
    rc_BigDecimal = (new BigDecimal("32")).plus();
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0832()
  {
    rc_int = (new BigDecimal("0E+9")).compareTo(new BigDecimal("0E+9"));
    Assert.assertEquals(0, rc_int);
  }
  public void testItem_0833()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("0E+9")).setScale(0, -2147483648);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0834()
  {
    rc_BigDecimal = (new BigDecimal("0E+9")).remainder(new BigDecimal("1"));
    Assert.assertEquals("0E+9", rc_BigDecimal.toString());
  }
  public void testItem_0835()
  {
    rc_BigDecimal = (new BigDecimal("1")).abs(new MathContext("precision=1 roundingMode=DOWN"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0836()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'8', '\234', '\0', '8', '\234', '\uFFFF', '\uFFFF', '\0', '\234', '\uFFFF', '\uFFFF', '\1', '\uFFFF', '\uFFFF', '\234', '\uFFFF', '\1', '\1', '\uFFFF', '\234', '\uFFFF', '8', '\1', '8', '\uFFFF', '\234', '\uFFFF', '\uFFFF', '\1', '\1', '\uFFFF', '\234', '\0', '\234', '\234', '\1', '8', '\1', '\1', '8', '8', '\0', '\0', '\234', '\234', '8', '8', '\1', '8', '\uFFFF', '8', '8', '8', '8', '\234', '\uFFFF', '\234', '8', '8', '8', '\0', '\uFFFF', '\uFFFF', '\1', '\uFFFF', '\234', '\234', '8', '\234', '\0', '\1', '\0', '\234', '\1', '\0', '\uFFFF', '\0', '\0', '\234', '\0', '\1', '\234', '\234', '\0', '\234', '\0', '\uFFFF', '\0', '8', '\0', '\234', '\1', '\0', '8', '\0', '8', '8', '\uFFFF', '\0', '8'});
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0837()
  {
    rc_BigDecimal = (new BigDecimal("0E+9")).divide(new BigDecimal("1"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("0E+9", rc_BigDecimal.toString());
  }
  public void testItem_0838()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("1")).divide(new BigDecimal("0E+9"), java.math.RoundingMode.HALF_UP);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0839()
  {
    rc_int = (new BigDecimal("0E+9")).precision();
    Assert.assertEquals(1, rc_int);
  }
  public void testItem_0840()
  {
    rc_BigDecimal = new BigDecimal(1);
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0841()
  {
    rc_BigDecimal = (new BigDecimal("0E+9")).scaleByPowerOfTen(-1);
    Assert.assertEquals("0E+8", rc_BigDecimal.toString());
  }
  public void testItem_0842()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("32")).divide(new BigDecimal("1"), -1);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0843()
  {
    rc_String = (new BigDecimal("1")).toEngineeringString();
    Assert.assertEquals("1", rc_String);
  }
  public void testItem_0844()
  {
    rc_BigDecimal = (new BigDecimal("0E+9")).add(new BigDecimal("1"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0845()
  {
    rc_BigDecimal = (new BigDecimal("1")).subtract(new BigDecimal("1"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0846()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("<725<15F8RO>MG;>2C5P726T?P1<HRI8G>9I6;JL4UAV2Y;OEHHRN@7AAF7:1G=;2JX6Q;1O9@3:>B?9HK:QPPS;R;5IO81ATR5J");
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0847()
  {
    rc_BigDecimal = (new BigDecimal("0E+9")).divide(new BigDecimal("1"));
    Assert.assertEquals("0E+9", rc_BigDecimal.toString());
  }
  public void testItem_0848()
  {
    rc_long = (new BigDecimal("0E+9")).longValueExact();
    Assert.assertEquals(0L, rc_long);
  }
  public void testItem_0849()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal_array = (new BigDecimal("1")).divideAndRemainder(new BigDecimal("0E+9"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0850()
  {
    rc_BigDecimal = (new BigDecimal("32")).setScale(0, java.math.RoundingMode.HALF_UP);
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  @SuppressWarnings("unlikely-arg-type")
  public void testItem_0851()
  {
    rc_boolean = (new BigDecimal("1")).equals("");
    Assert.assertEquals(false, rc_boolean);
  }
  public void testItem_0852()
  {
    rc_byte = (new BigDecimal("32")).byteValueExact();
    Assert.assertEquals(32, rc_byte);
  }
  public void testItem_0853()
  {
    rc_String = (new BigDecimal("32")).toPlainString();
    Assert.assertEquals("32", rc_String);
  }
  public void testItem_0854()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("0E+9")).divide(new BigDecimal("0E+9"), java.math.RoundingMode.HALF_DOWN);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0855()
  {
    rc_BigDecimal = new BigDecimal(4.9E-324);
    Assert.assertEquals("4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625E-324", rc_BigDecimal.toString());
  }
  public void testItem_0856()
  {
    rc_BigDecimal = (new BigDecimal("1")).min(new BigDecimal("0E+9"));
    Assert.assertEquals("0E+9", rc_BigDecimal.toString());
  }
  public void testItem_0857()
  {
    rc_String = (new BigDecimal("0E+9")).toString();
    Assert.assertEquals("0E+9", rc_String);
  }
  public void testItem_0858()
  {
    rc_BigDecimal = (new BigDecimal("0E+9")).negate();
    Assert.assertEquals("0E+9", rc_BigDecimal.toString());
  }
  public void testItem_0859()
  {
    rc_BigDecimal = (new BigDecimal("32")).setScale(0, java.math.RoundingMode.CEILING);
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0860()
  {
    rc_BigDecimal = (new BigDecimal("1")).pow(1, new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0861()
  {
    rc_BigDecimal = (new BigDecimal("0E+9")).remainder(new BigDecimal("32"));
    Assert.assertEquals("0E+9", rc_BigDecimal.toString());
  }
  public void testItem_0862()
  {
    rc_BigDecimal = (new BigDecimal("0E+9")).abs();
    Assert.assertEquals("0E+9", rc_BigDecimal.toString());
  }
  public void testItem_0863()
  {
    rc_BigDecimal = new BigDecimal(1135879015891L, new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
    Assert.assertEquals("1135879015891", rc_BigDecimal.toString());
  }
  public void testItem_0864()
  {
    rc_BigDecimal = (new BigDecimal("1")).divide(new BigDecimal("32"), 1, java.math.RoundingMode.DOWN);
    Assert.assertEquals("0.0", rc_BigDecimal.toString());
  }
  public void testItem_0865()
  {
    rc_BigDecimal = (new BigDecimal("1")).add(new BigDecimal("1"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("2", rc_BigDecimal.toString());
  }
  public void testItem_0866()
  {
    rc_BigDecimal = (new BigDecimal("0E+9")).scaleByPowerOfTen(-1);
    Assert.assertEquals("0E+8", rc_BigDecimal.toString());
  }
  public void testItem_0867()
  {
    rc_int = (new BigDecimal("2")).intValueExact();
    Assert.assertEquals(2, rc_int);
  }
  public void testItem_0868()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("0E+9")).remainder(new BigDecimal("0E+9"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0869()
  {
    rc_BigDecimal = (new BigDecimal("0E+9")).stripTrailingZeros();
	Assert.assertEquals(0E+9, rc_BigDecimal.doubleValue(), 0);
  }
  public void testItem_0870()
  {
    rc_BigDecimal = new BigDecimal(0, new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0871()
  {
    rc_BigDecimal = (new BigDecimal("0")).negate(new MathContext("precision=1 roundingMode=DOWN"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
//  public void testItem_0872()
//  {
//    boolean caught;
//    if (!Boolean.getBoolean("notanerror"))
//    {
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("32")).divideToIntegralValue(new BigDecimal("32"), new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
//    }
//    catch (java.lang.ArithmeticException e) {
//      caught = true;
//    }
//    Assert.assertEquals("86.24161073825503%", true, caught);
//    }
//  }
  public void testItem_0873()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\uFFFF', '\234', '\1', '\234', '8', '\1', '\1', '8', '\234', '\0', '\0', '\0', '\0', '\uFFFF', '\1', '\1', '\uFFFF', '\234', '\0', '\uFFFF', '\1', '8', '\1', '\0', '\0', '\uFFFF', '\1', '\1', '8', '\uFFFF', '\0', '\0', '\1', '8', '\0', '\uFFFF', '\1', '\0', '\1', '8', '\uFFFF', '\234', '\uFFFF', '\1', '\234', '\1', '\uFFFF', '\1', '\1', '\uFFFF', '\234', '\uFFFF', '\234', '8', '\0', '\1', '\uFFFF', '\0', '\0', '8', '8', '\uFFFF', '\234', '\1', '\1', '8', '\234', '\0', '\uFFFF', '\1', '\1', '\1', '\234', '\uFFFF', '\0', '\1', '\234', '\0', '8', '\uFFFF', '\0', '\uFFFF', '\0', '\uFFFF', '\234', '\uFFFF', '\234', '8', '\0', '\0', '\uFFFF', '8', '\1', '\234', '\0', '\234', '\1', '\1', '\uFFFF', '\uFFFF'}, -1, 0);
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0874()
  {
    rc_BigDecimal = (new BigDecimal("0E+9")).divide(new BigDecimal("32"), 0);
    Assert.assertEquals("0E+9", rc_BigDecimal.toString());
  }
  public void testItem_0875()
  {
    rc_float = (new BigDecimal("32")).floatValue();
    Assert.assertEquals(32.0F, rc_float, 0);
  }
  public void testItem_0876()
  {
    rc_int = (new BigDecimal("0E+9")).scale();
    Assert.assertEquals(-9, rc_int);
  }
  public void testItem_0877()
  {
    rc_BigInteger = (new BigDecimal("32")).toBigIntegerExact();
    Assert.assertEquals("32", rc_BigInteger.toString());
  }
  public void testItem_0878()
  {
    rc_BigDecimal = new BigDecimal(9223372036854775807L, new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("9223372036854775807", rc_BigDecimal.toString());
  }
  public void testItem_0879()
  {
    rc_BigDecimal = (new BigDecimal("32")).add(new BigDecimal("0"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0880()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\234'}, new MathContext("precision=1 roundingMode=DOWN"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0881()
  {
    rc_BigDecimal_array = (new BigDecimal("0E+9")).divideAndRemainder(new BigDecimal("32"), new MathContext("precision=1 roundingMode=HALF_UP"));
  }
  public void testItem_0882()
  {
    rc_MathContext = new MathContext(1, java.math.RoundingMode.UNNECESSARY);
    Assert.assertEquals("precision=1 roundingMode=UNNECESSARY", rc_MathContext.toString());
  }
  public void testItem_0883()
  {
    rc_BigDecimal = (new BigDecimal("32")).multiply(new BigDecimal("0E+9"));
    Assert.assertEquals("0E+9", rc_BigDecimal.toString());
  }
  public void testItem_0884()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("32")).scaleByPowerOfTen(-2147483648);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0885()
  {
    rc_long = (new BigDecimal("0E+9")).longValue();
    Assert.assertEquals(0L, rc_long);
  }
  public void testItem_0886()
  {
    rc_short = (new BigDecimal("32")).shortValueExact();
    Assert.assertEquals(32, rc_short);
  }
  public void testItem_0887()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\1'}, new MathContext("precision=1 roundingMode=UNNECESSARY"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0888()
  {
    rc_BigDecimal = (new BigDecimal("0E+9")).abs(new MathContext("precision=1 roundingMode=UNNECESSARY"));
    Assert.assertEquals("0E+9", rc_BigDecimal.toString());
  }
  public void testItem_0889()
  {
    rc_BigDecimal = new BigDecimal(2147483647, new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
    Assert.assertEquals("2147483647", rc_BigDecimal.toString());
  }
  public void testItem_0890()
  {
    rc_BigInteger = (new BigDecimal("2147483647")).toBigInteger();
    Assert.assertEquals("2147483647", rc_BigInteger.toString());
  }
  public void testItem_0891()
  {
    rc_float = (new BigDecimal("2147483647")).floatValue();
    Assert.assertEquals(2.147483648E9F, rc_float, 0);
  }
  public void testItem_0892()
  {
    rc_BigInteger = (new BigDecimal("32")).toBigInteger();
    Assert.assertEquals("32", rc_BigInteger.toString());
  }
  public void testItem_0893()
  {
    rc_BigDecimal = (new BigDecimal("32")).pow(1, new MathContext("precision=1 roundingMode=DOWN"));
    Assert.assertEquals("3E+1", rc_BigDecimal.toString());
  }
  public void testItem_0894()
  {
    rc_BigDecimal = (new BigDecimal("32")).divideToIntegralValue(new BigDecimal("2147483647"), new MathContext("precision=1 roundingMode=DOWN"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0895()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\1'}, new MathContext("precision=0 roundingMode=HALF_UP"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0896()
  {
    rc_int = (new BigDecimal("0")).scale();
    Assert.assertEquals(0, rc_int);
  }
  public void testItem_0897()
  {
    rc_BigDecimal = (new BigDecimal("3E+1")).plus(new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("3E+1", rc_BigDecimal.toString());
  }
  public void testItem_0898()
  {
    rc_BigDecimal = (new BigDecimal("0")).setScale(2147483647);
    Assert.assertEquals("0E-2147483647", rc_BigDecimal.toString());
  }
  public void testItem_0899()
  {
    rc_BigDecimal_array = (new BigDecimal("2147483647")).divideAndRemainder(new BigDecimal("3E+1"));
  }
  public void testItem_0900()
  {
    rc_BigDecimal = (new BigDecimal("3E+1")).movePointRight(-2147483648);
    Assert.assertEquals("3E-2147483647", rc_BigDecimal.toString());
  }
  public void testItem_0901()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("3E+1", rc_BigDecimal.toString());
  }
  public void testItem_0902()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"), 2147483647, new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("3.2E-2147483646", rc_BigDecimal.toString());
  }
  public void testItem_0903()
  {
    rc_BigDecimal = (new BigDecimal("3.2E-2147483646")).min(new BigDecimal("3E-2147483647"));
    Assert.assertEquals("3E-2147483647", rc_BigDecimal.toString());
  }
  public void testItem_0904()
  {
    rc_BigDecimal = new BigDecimal(1L, new MathContext("precision=1 roundingMode=DOWN"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0905()
  {
    rc_BigDecimal = (new BigDecimal("1")).max(new BigDecimal("2147483647"));
    Assert.assertEquals("2147483647", rc_BigDecimal.toString());
  }
//  public void testItem_0906()
//  {
//    boolean caught;
//    if (!Boolean.getBoolean("notanerror"))
//    {
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("3E-2147483647")).setScale(-1, java.math.RoundingMode.DOWN);
//    }
//    catch (java.lang.ArithmeticException e) {
//      caught = true;
//    }
//    Assert.assertEquals("86.24161073825503%", true, caught);
//    }
//  }
  public void testItem_0907()
  {
    rc_BigDecimal = new BigDecimal(-9223372036854775808L);
    Assert.assertEquals("-9223372036854775808", rc_BigDecimal.toString());
  }
  public void testItem_0908()
  {
    rc_BigDecimal_array = (new BigDecimal("0")).divideAndRemainder(new BigDecimal("3E+1"));
  }
  public void testItem_0909()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("-9223372036854775808")).pow(2147483647, new MathContext("precision=1 roundingMode=HALF_UP"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0910()
  {
    rc_double = (new BigDecimal("3E+1")).doubleValue();
    Assert.assertEquals(30.0, rc_double, 0);
  }
  public void testItem_0911()
  {
    rc_long = (new BigDecimal("0")).longValueExact();
    Assert.assertEquals(0L, rc_long);
  }
  public void testItem_0912()
  {
    rc_BigDecimal = new BigDecimal(new java.math.BigInteger("32"));
    Assert.assertEquals("32", rc_BigDecimal.toString());
  }
  public void testItem_0913()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal_array = (new BigDecimal("3E-2147483647")).divideAndRemainder(new BigDecimal("0"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0914()
  {
    rc_int = (new BigDecimal("3E-2147483647")).compareTo(new BigDecimal("0"));
    Assert.assertEquals(1, rc_int);
  }
  public void testItem_0915()
  {
    rc_BigDecimal = new BigDecimal(-9223372036854775808L, new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("-9223372036854775808", rc_BigDecimal.toString());
  }
  @SuppressWarnings("unlikely-arg-type")
  public void testItem_0916()
  {
    rc_boolean = (new BigDecimal("0")).equals("");
    Assert.assertEquals(false, rc_boolean);
  }
  public void testItem_0917()
  {
    rc_BigDecimal = (new BigDecimal("-9223372036854775808")).movePointRight(0);
    Assert.assertEquals("-9223372036854775808", rc_BigDecimal.toString());
  }
  public void testItem_0918()
  {
    rc_BigDecimal = (new BigDecimal("-9223372036854775808")).scaleByPowerOfTen(-1);
    Assert.assertEquals("-922337203685477580.8", rc_BigDecimal.toString());
  }
  public void testItem_0919()
  {
    rc_BigDecimal = (new BigDecimal("-9223372036854775808")).setScale(-1, java.math.RoundingMode.CEILING);
    Assert.assertEquals("-9.22337203685477580E+18", rc_BigDecimal.toString());
  }
  public void testItem_0920()
  {
    rc_BigDecimal_array = (new BigDecimal("1")).divideAndRemainder(new BigDecimal("-9.22337203685477580E+18"));
  }
  public void testItem_0921()
  {
    rc_BigDecimal = (new BigDecimal("-9223372036854775808")).divide(new BigDecimal("1"), java.math.RoundingMode.UP);
    Assert.assertEquals("-9223372036854775808", rc_BigDecimal.toString());
  }
  public void testItem_0922()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("1")).divide(new BigDecimal("-9.22337203685477580E+18"), new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0923()
  {
    rc_BigDecimal = new BigDecimal(1.7976931348623157E308);
    Assert.assertEquals("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368", rc_BigDecimal.toString());
  }
  public void testItem_0924()
  {
    rc_short = (new BigDecimal("1")).shortValueExact();
    Assert.assertEquals(1, rc_short);
  }
  public void testItem_0925()
  {
    rc_int = (new BigDecimal("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368")).scale();
    Assert.assertEquals(0, rc_int);
  }
  public void testItem_0926()
  {
    rc_BigInteger = (new BigDecimal("-9223372036854775808")).toBigInteger();
    Assert.assertEquals("-9223372036854775808", rc_BigInteger.toString());
  }
  public void testItem_0927()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("-9223372036854775808")).pow(2147483647, new MathContext("precision=1 roundingMode=DOWN"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0928()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("", new MathContext("precision=1 roundingMode=HALF_UP"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0929()
  {
    rc_BigDecimal_array = (new BigDecimal("-9223372036854775808")).divideAndRemainder(new BigDecimal("1"), new MathContext("precision=0 roundingMode=HALF_UP"));
  }
  public void testItem_0930()
  {
    rc_BigDecimal = (new BigDecimal("-9.22337203685477580E+18")).divide(new BigDecimal("-9223372036854775808"), java.math.RoundingMode.DOWN);
    Assert.assertEquals("0E+1", rc_BigDecimal.toString());
  }
  public void testItem_0931()
  {
    rc_BigDecimal = (new BigDecimal("-9.22337203685477580E+18")).min(new BigDecimal("1"));
    Assert.assertEquals("-9.22337203685477580E+18", rc_BigDecimal.toString());
  }
  public void testItem_0932()
  {
    rc_BigDecimal = new BigDecimal(1L, new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0933()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("-9.22337203685477580E+18")).divide(new BigDecimal("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368"), 2147483647);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("86.24161073825503%", true, caught);
  }
  public void testItem_0934()
  {
    rc_BigDecimal = (new BigDecimal("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368")).scaleByPowerOfTen(2147483647);
    Assert.assertEquals("1.79769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368E+2147483955", rc_BigDecimal.toString());
  }
//  public void testItem_0935()
//  {
//    boolean caught;
//    rc_int = (new BigDecimal("0E+1")).hashCode();
//    Assert.assertEquals(-1, rc_int);
//  }
  public void testItem_0936()
  {
    rc_long = (new BigDecimal("1")).longValue();
    Assert.assertEquals(1L, rc_long);
  }
  public void testItem_0937()
  {
    rc_BigDecimal = (new BigDecimal("1")).min(new BigDecimal("-9.22337203685477580E+18"));
    Assert.assertEquals("-9.22337203685477580E+18", rc_BigDecimal.toString());
  }
  public void testItem_0938()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("-9.22337203685477580E+18")).divide(new BigDecimal("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368"), -2147483648);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("86.57718120805369%", true, caught);
  }
  public void testItem_0939()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("5RYT@E2V07ONST02NFHEEJG5GUTN1ONG0<2538<S2ENUEQ9CUHDJAJL5D2<77XK4>LR5<7P79FSQ2OTLA");
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("86.57718120805369%", true, caught);
  }
  public void testItem_0940()
  {
    rc_BigDecimal = new BigDecimal(0.0, new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0941()
  {
    rc_float = (new BigDecimal("0E+1")).floatValue();
    Assert.assertEquals(0.0F, rc_float, 0);
  }
  public void testItem_0942()
  {
    rc_BigDecimal = (new BigDecimal("0E+1")).subtract(new BigDecimal("1"), new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("-1", rc_BigDecimal.toString());
  }
  public void testItem_0943()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\0'}, new MathContext("precision=1 roundingMode=HALF_UP"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("86.57718120805369%", true, caught);
  }
  public void testItem_0944()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("-1")).divide(new BigDecimal("0E+1"), java.math.RoundingMode.HALF_UP);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("86.57718120805369%", true, caught);
  }
  public void testItem_0945()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal_array = (new BigDecimal("-9.22337203685477580E+18")).divideAndRemainder(new BigDecimal("0"), new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("86.57718120805369%", true, caught);
  }
  public void testItem_0946()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("0E+1")).divide(new BigDecimal("0"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("86.57718120805369%", true, caught);
  }
  public void testItem_0947()
  {
    rc_BigDecimal = (new BigDecimal("0E+1")).stripTrailingZeros();
	Assert.assertEquals(0E+1, rc_BigDecimal.doubleValue(), 0);
  }
  public void testItem_0948()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("");
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("86.57718120805369%", true, caught);
  }
  public void testItem_0949()
  {
    rc_BigDecimal = (new BigDecimal("-1")).subtract(new BigDecimal("-1"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0950()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\234'}, 2147483647, 2147483647, new MathContext("precision=0 roundingMode=HALF_UP"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("86.57718120805369%", true, caught);
  }
  public void testItem_0951()
  {
    rc_long = (new BigDecimal("-9.22337203685477580E+18")).longValue();
    Assert.assertEquals(-9223372036854775800L, rc_long);
  }
  public void testItem_0952()
  {
    rc_BigDecimal = new BigDecimal(0);
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
//  public void testItem_0953()
//  {
//    boolean caught;
//    caught = false;
//    try {
//      rc_BigDecimal_array = (new BigDecimal("-9.22337203685477580E+18")).divideAndRemainder(new BigDecimal("-1"), new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
//    }
//    catch (java.lang.OutOfMemoryError e) {
//      caught = true;
//    }
//    Assert.assertEquals("86.57718120805369%", true, caught);
//  }
  public void testItem_0954()
  {
    rc_int = (new BigDecimal("-9.22337203685477580E+18")).scale();
    Assert.assertEquals(-1, rc_int);
  }
  public void testItem_0955()
  {
    rc_BigDecimal = (new BigDecimal("-9.22337203685477580E+18")).max(new BigDecimal("0"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0956()
  {
    rc_BigInteger = (new BigDecimal("-1")).toBigInteger();
    Assert.assertEquals("-1", rc_BigInteger.toString());
  }
  public void testItem_0957()
  {
    rc_BigDecimal = (new BigDecimal("0")).remainder(new BigDecimal("-9.22337203685477580E+18"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0958()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext(-1);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("86.57718120805369%", true, caught);
  }
  public void testItem_0959()
  {
    rc_BigDecimal = (new BigDecimal("0E+1")).pow(0, new MathContext("precision=1 roundingMode=DOWN"));
    Assert.assertEquals("1", rc_BigDecimal.toString());
  }
  public void testItem_0960()
  {
    rc_BigDecimal = new BigDecimal(new char[]{'8'});
    Assert.assertEquals("8", rc_BigDecimal.toString());
  }
  public void testItem_0961()
  {
    rc_BigDecimal = (new BigDecimal("0E+1")).movePointLeft(1);
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0962()
  {
    rc_BigDecimal = (new BigDecimal("0E+1")).multiply(new BigDecimal("0"), new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
    Assert.assertEquals("0E+1", rc_BigDecimal.toString());
  }
  public void testItem_0963()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("E64WYE3O>9?3?3K3K<=19K5UL:6M<HH5;N6=EYVWO;A2RROE:@PTQYOQD17=5A1R?CUY2I=90ESQXM;8>S5KKA?2LVSX8E>22U3K", new MathContext("precision=0 roundingMode=HALF_UP"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("86.57718120805369%", true, caught);
  }
  public void testItem_0964()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext(-1, java.math.RoundingMode.HALF_UP);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("86.57718120805369%", true, caught);
  }
  public void testItem_0965()
  {
    rc_BigDecimal_array = (new BigDecimal("-9.22337203685477580E+18")).divideAndRemainder(new BigDecimal("-9.22337203685477580E+18"), new MathContext("precision=0 roundingMode=HALF_UP"));
  }
  public void testItem_0966()
  {
    rc_BigDecimal = (new BigDecimal("-9.22337203685477580E+18")).negate(new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
    Assert.assertEquals("9.22337203685477580E+18", rc_BigDecimal.toString());
  }
  public void testItem_0967()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\uFFFF', '8', '\0', '8', '\uFFFF', '\0', '\0', '\uFFFF', '\uFFFF', '\uFFFF', '\0', '\234', '\1', '\1', '\uFFFF', '\1', '\uFFFF', '\1', '\0', '\1', '\uFFFF', '\0', '8', '\1', '\1', '\uFFFF', '\uFFFF', '\uFFFF', '\1', '8', '\uFFFF', '8', '\0', '\uFFFF', '\0', '\0', '\0', '8', '\234', '8', '\1', '\1', '\234', '\0', '\0', '\0', '\1', '\234', '\0', '\0', '\0', '\uFFFF', '\uFFFF', '\1', '\0', '\uFFFF', '\234', '\0', '\0', '\1', '\234', '8', '\0', '\0', '\0', '\234', '\uFFFF', '\1', '\0', '\1', '8', '\1', '\0', '\234', '8', '\0', '\uFFFF', '\234'});
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("86.57718120805369%", true, caught);
  }
  public void testItem_0968()
  {
    rc_BigDecimal = (new BigDecimal("0E+1")).round(new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
    Assert.assertEquals("0E+1", rc_BigDecimal.toString());
  }
  public void testItem_0969()
  {
    rc_MathContext = new MathContext(1, java.math.RoundingMode.UP);
    Assert.assertEquals("precision=1 roundingMode=UP", rc_MathContext.toString());
  }
  public void testItem_0970()
  {
    rc_long = (new BigDecimal("0")).longValueExact();
    Assert.assertEquals(0L, rc_long);
  }
  public void testItem_0971()
  {
    rc_float = (new BigDecimal("0E+1")).floatValue();
    Assert.assertEquals(0.0F, rc_float, 0);
  }
  public void testItem_0972()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("9.22337203685477580E+18")).divide(new BigDecimal("0"), 2147483647);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("86.57718120805369%", true, caught);
  }
  public void testItem_0973()
  {
    rc_String = (new BigDecimal("0")).toPlainString();
    Assert.assertEquals("0", rc_String);
  }
  public void testItem_0974()
  {
    rc_int = (new BigDecimal("-9.22337203685477580E+18")).compareTo(new BigDecimal("-9.22337203685477580E+18"));
    Assert.assertEquals(0, rc_int);
  }
  @SuppressWarnings("unlikely-arg-type")
  public void testItem_0975()
  {
    rc_boolean = (new BigDecimal("9.22337203685477580E+18")).equals("IUB4C5Y78JBAUB=<VL;0S9KXMV7NA=CXBGO719FISQM");
    Assert.assertEquals(false, rc_boolean);
  }
  public void testItem_0976()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("0E+1")).pow(2147483647);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("86.57718120805369%", true, caught);
  }
  public void testItem_0977()
  {
    rc_BigDecimal = new BigDecimal(-1, new MathContext("precision=0 roundingMode=HALF_UP"));
    Assert.assertEquals("-1", rc_BigDecimal.toString());
  }
  public void testItem_0978()
  {
    rc_BigDecimal = (new BigDecimal("-1")).pow(1);
    Assert.assertEquals("-1", rc_BigDecimal.toString());
  }
  public void testItem_0979()
  {
    rc_BigDecimal = (new BigDecimal("0")).subtract(new BigDecimal("-9.22337203685477580E+18"));
    Assert.assertEquals("9223372036854775800", rc_BigDecimal.toString());
  }
//  public void testItem_0980()
//  {
//    boolean caught;
//    if (!Boolean.getBoolean("notanerror"))
//    {
//    caught = false;
//    try {
//      rc_BigDecimal = (new BigDecimal("0")).divide(new BigDecimal("-1"), -2147483648, java.math.RoundingMode.HALF_DOWN);
//    }
//    catch (java.lang.NegativeArraySizeException e) {
//      caught = true;
//    }
//    Assert.assertEquals("86.57718120805369%", true, caught);
//    }
//  }
  public void testItem_0981()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("-9.22337203685477580E+18")).divide(new BigDecimal("0"));
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("86.57718120805369%", true, caught);
  }
  public void testItem_0982()
  {
    rc_BigDecimal = (new BigDecimal("9223372036854775800")).add(new BigDecimal("-9.22337203685477580E+18"), new MathContext("precision=1 roundingMode=HALF_UP"));
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0983()
  {
    rc_BigDecimal = (new BigDecimal("0")).abs();
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0984()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("-1")).movePointRight(-2147483648);
    }
    catch (java.lang.ArithmeticException e) {
      caught = true;
    }
    Assert.assertEquals("86.57718120805369%", true, caught);
  }
  public void testItem_0985()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = (new BigDecimal("0")).divide(new BigDecimal("0"), 2147483647);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("86.57718120805369%", true, caught);
  }
  public void testItem_0986()
  {
    boolean caught;
    caught = false;
    try {
      rc_MathContext = new MathContext(-2147483648, java.math.RoundingMode.HALF_EVEN);
    }
    catch (java.lang.IllegalArgumentException e) {
      caught = true;
    }
    Assert.assertEquals("86.57718120805369%", true, caught);
  }
  public void testItem_0987()
  {
    rc_BigDecimal = (new BigDecimal("-9.22337203685477580E+18")).plus(new MathContext("precision=1 roundingMode=DOWN"));
    Assert.assertEquals("-9E+18", rc_BigDecimal.toString());
  }
  public void testItem_0988()
  {
    rc_BigInteger = (new BigDecimal("0")).toBigInteger();
    Assert.assertEquals("0", rc_BigInteger.toString());
  }
  public void testItem_0989()
  {
    rc_BigDecimal = (new BigDecimal("0")).scaleByPowerOfTen(-2147483648);
    Assert.assertEquals("0E-2147483647", rc_BigDecimal.toString());
  }
  public void testItem_0990()
  {
    rc_String = (new BigDecimal("-1")).toEngineeringString();
    Assert.assertEquals("-1", rc_String);
  }
  public void testItem_0991()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal(new char[]{'\uFFFF'}, new MathContext("precision=2147483647 roundingMode=HALF_DOWN"));
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("86.57718120805369%", true, caught);
  }
  public void testItem_0992()
  {
    rc_int = (new BigDecimal("0")).signum();
    Assert.assertEquals(0, rc_int);
  }
  public void testItem_0993()
  {
    rc_BigDecimal = (new BigDecimal("0")).pow(1);
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0994()
  {
    rc_String = (new BigDecimal("9223372036854775800")).toString();
    Assert.assertEquals("9223372036854775800", rc_String);
  }
  public void testItem_0995()
  {
    boolean caught;
    caught = false;
    try {
      rc_BigDecimal = new BigDecimal("675P1OSJUUD@AV1S35QKJ3T105>636@74<JF3IK6K<CPK>2M;WXRNPSK>Q");
    }
    catch (java.lang.NumberFormatException e) {
      caught = true;
    }
    Assert.assertEquals("86.57718120805369%", true, caught);
  }
  public void testItem_0996()
  {
    rc_BigDecimal = (new BigDecimal("0")).setScale(0);
    Assert.assertEquals("0", rc_BigDecimal.toString());
  }
  public void testItem_0997()
  {
    rc_int = (new BigDecimal("-1")).precision();
    Assert.assertEquals(1, rc_int);
  }
  public void testItem_0998()
  {
    rc_int = (new BigDecimal("-9E+18")).signum();
    Assert.assertEquals(-1, rc_int);
  }
  @SuppressWarnings("unlikely-arg-type")
  public void testItem_0999()
  {
    rc_boolean = (new BigDecimal("0")).equals("QF0BGD1@83H<0IE98K<O=NF7V=2KSR1M>Q@JCH48IVJ8QW4?U8B@18WP>NVJ2N0");
    Assert.assertEquals(false, rc_boolean);
  }
}
